// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/confus1on/UKM/ent/predicate"
	"github.com/confus1on/UKM/ent/profile"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/roleukm"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ProfileUKMUpdate is the builder for updating ProfileUKM entities.
type ProfileUKMUpdate struct {
	config
	hooks      []Hook
	mutation   *ProfileUKMMutation
	predicates []predicate.ProfileUKM
}

// Where adds a new predicate for the builder.
func (puu *ProfileUKMUpdate) Where(ps ...predicate.ProfileUKM) *ProfileUKMUpdate {
	puu.predicates = append(puu.predicates, ps...)
	return puu
}

// SetReason sets the reason field.
func (puu *ProfileUKMUpdate) SetReason(s string) *ProfileUKMUpdate {
	puu.mutation.SetReason(s)
	return puu
}

// SetOwnerProfileID sets the owner_profile edge to Profile by id.
func (puu *ProfileUKMUpdate) SetOwnerProfileID(id int) *ProfileUKMUpdate {
	puu.mutation.SetOwnerProfileID(id)
	return puu
}

// SetNillableOwnerProfileID sets the owner_profile edge to Profile by id if the given value is not nil.
func (puu *ProfileUKMUpdate) SetNillableOwnerProfileID(id *int) *ProfileUKMUpdate {
	if id != nil {
		puu = puu.SetOwnerProfileID(*id)
	}
	return puu
}

// SetOwnerProfile sets the owner_profile edge to Profile.
func (puu *ProfileUKMUpdate) SetOwnerProfile(p *Profile) *ProfileUKMUpdate {
	return puu.SetOwnerProfileID(p.ID)
}

// SetOwnerUkmID sets the owner_ukm edge to Ukm by id.
func (puu *ProfileUKMUpdate) SetOwnerUkmID(id int) *ProfileUKMUpdate {
	puu.mutation.SetOwnerUkmID(id)
	return puu
}

// SetNillableOwnerUkmID sets the owner_ukm edge to Ukm by id if the given value is not nil.
func (puu *ProfileUKMUpdate) SetNillableOwnerUkmID(id *int) *ProfileUKMUpdate {
	if id != nil {
		puu = puu.SetOwnerUkmID(*id)
	}
	return puu
}

// SetOwnerUkm sets the owner_ukm edge to Ukm.
func (puu *ProfileUKMUpdate) SetOwnerUkm(u *Ukm) *ProfileUKMUpdate {
	return puu.SetOwnerUkmID(u.ID)
}

// SetOwnerRoleID sets the owner_role edge to RoleUKM by id.
func (puu *ProfileUKMUpdate) SetOwnerRoleID(id int) *ProfileUKMUpdate {
	puu.mutation.SetOwnerRoleID(id)
	return puu
}

// SetNillableOwnerRoleID sets the owner_role edge to RoleUKM by id if the given value is not nil.
func (puu *ProfileUKMUpdate) SetNillableOwnerRoleID(id *int) *ProfileUKMUpdate {
	if id != nil {
		puu = puu.SetOwnerRoleID(*id)
	}
	return puu
}

// SetOwnerRole sets the owner_role edge to RoleUKM.
func (puu *ProfileUKMUpdate) SetOwnerRole(r *RoleUKM) *ProfileUKMUpdate {
	return puu.SetOwnerRoleID(r.ID)
}

// ClearOwnerProfile clears the owner_profile edge to Profile.
func (puu *ProfileUKMUpdate) ClearOwnerProfile() *ProfileUKMUpdate {
	puu.mutation.ClearOwnerProfile()
	return puu
}

// ClearOwnerUkm clears the owner_ukm edge to Ukm.
func (puu *ProfileUKMUpdate) ClearOwnerUkm() *ProfileUKMUpdate {
	puu.mutation.ClearOwnerUkm()
	return puu
}

// ClearOwnerRole clears the owner_role edge to RoleUKM.
func (puu *ProfileUKMUpdate) ClearOwnerRole() *ProfileUKMUpdate {
	puu.mutation.ClearOwnerRole()
	return puu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (puu *ProfileUKMUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := puu.mutation.Reason(); ok {
		if err := profileukm.ReasonValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"reason\": %v", err)
		}
	}

	var (
		err      error
		affected int
	)
	if len(puu.hooks) == 0 {
		affected, err = puu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileUKMMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puu.mutation = mutation
			affected, err = puu.sqlSave(ctx)
			return affected, err
		})
		for i := len(puu.hooks) - 1; i >= 0; i-- {
			mut = puu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (puu *ProfileUKMUpdate) SaveX(ctx context.Context) int {
	affected, err := puu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (puu *ProfileUKMUpdate) Exec(ctx context.Context) error {
	_, err := puu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puu *ProfileUKMUpdate) ExecX(ctx context.Context) {
	if err := puu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puu *ProfileUKMUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profileukm.Table,
			Columns: profileukm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profileukm.FieldID,
			},
		},
	}
	if ps := puu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puu.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profileukm.FieldReason,
		})
	}
	if puu.mutation.OwnerProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerProfileTable,
			Columns: []string{profileukm.OwnerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.OwnerProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerProfileTable,
			Columns: []string{profileukm.OwnerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.OwnerUkmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerUkmTable,
			Columns: []string{profileukm.OwnerUkmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.OwnerUkmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerUkmTable,
			Columns: []string{profileukm.OwnerUkmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puu.mutation.OwnerRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerRoleTable,
			Columns: []string{profileukm.OwnerRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roleukm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puu.mutation.OwnerRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerRoleTable,
			Columns: []string{profileukm.OwnerRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roleukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, puu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profileukm.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ProfileUKMUpdateOne is the builder for updating a single ProfileUKM entity.
type ProfileUKMUpdateOne struct {
	config
	hooks    []Hook
	mutation *ProfileUKMMutation
}

// SetReason sets the reason field.
func (puuo *ProfileUKMUpdateOne) SetReason(s string) *ProfileUKMUpdateOne {
	puuo.mutation.SetReason(s)
	return puuo
}

// SetOwnerProfileID sets the owner_profile edge to Profile by id.
func (puuo *ProfileUKMUpdateOne) SetOwnerProfileID(id int) *ProfileUKMUpdateOne {
	puuo.mutation.SetOwnerProfileID(id)
	return puuo
}

// SetNillableOwnerProfileID sets the owner_profile edge to Profile by id if the given value is not nil.
func (puuo *ProfileUKMUpdateOne) SetNillableOwnerProfileID(id *int) *ProfileUKMUpdateOne {
	if id != nil {
		puuo = puuo.SetOwnerProfileID(*id)
	}
	return puuo
}

// SetOwnerProfile sets the owner_profile edge to Profile.
func (puuo *ProfileUKMUpdateOne) SetOwnerProfile(p *Profile) *ProfileUKMUpdateOne {
	return puuo.SetOwnerProfileID(p.ID)
}

// SetOwnerUkmID sets the owner_ukm edge to Ukm by id.
func (puuo *ProfileUKMUpdateOne) SetOwnerUkmID(id int) *ProfileUKMUpdateOne {
	puuo.mutation.SetOwnerUkmID(id)
	return puuo
}

// SetNillableOwnerUkmID sets the owner_ukm edge to Ukm by id if the given value is not nil.
func (puuo *ProfileUKMUpdateOne) SetNillableOwnerUkmID(id *int) *ProfileUKMUpdateOne {
	if id != nil {
		puuo = puuo.SetOwnerUkmID(*id)
	}
	return puuo
}

// SetOwnerUkm sets the owner_ukm edge to Ukm.
func (puuo *ProfileUKMUpdateOne) SetOwnerUkm(u *Ukm) *ProfileUKMUpdateOne {
	return puuo.SetOwnerUkmID(u.ID)
}

// SetOwnerRoleID sets the owner_role edge to RoleUKM by id.
func (puuo *ProfileUKMUpdateOne) SetOwnerRoleID(id int) *ProfileUKMUpdateOne {
	puuo.mutation.SetOwnerRoleID(id)
	return puuo
}

// SetNillableOwnerRoleID sets the owner_role edge to RoleUKM by id if the given value is not nil.
func (puuo *ProfileUKMUpdateOne) SetNillableOwnerRoleID(id *int) *ProfileUKMUpdateOne {
	if id != nil {
		puuo = puuo.SetOwnerRoleID(*id)
	}
	return puuo
}

// SetOwnerRole sets the owner_role edge to RoleUKM.
func (puuo *ProfileUKMUpdateOne) SetOwnerRole(r *RoleUKM) *ProfileUKMUpdateOne {
	return puuo.SetOwnerRoleID(r.ID)
}

// ClearOwnerProfile clears the owner_profile edge to Profile.
func (puuo *ProfileUKMUpdateOne) ClearOwnerProfile() *ProfileUKMUpdateOne {
	puuo.mutation.ClearOwnerProfile()
	return puuo
}

// ClearOwnerUkm clears the owner_ukm edge to Ukm.
func (puuo *ProfileUKMUpdateOne) ClearOwnerUkm() *ProfileUKMUpdateOne {
	puuo.mutation.ClearOwnerUkm()
	return puuo
}

// ClearOwnerRole clears the owner_role edge to RoleUKM.
func (puuo *ProfileUKMUpdateOne) ClearOwnerRole() *ProfileUKMUpdateOne {
	puuo.mutation.ClearOwnerRole()
	return puuo
}

// Save executes the query and returns the updated entity.
func (puuo *ProfileUKMUpdateOne) Save(ctx context.Context) (*ProfileUKM, error) {
	if v, ok := puuo.mutation.Reason(); ok {
		if err := profileukm.ReasonValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"reason\": %v", err)
		}
	}

	var (
		err  error
		node *ProfileUKM
	)
	if len(puuo.hooks) == 0 {
		node, err = puuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileUKMMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puuo.mutation = mutation
			node, err = puuo.sqlSave(ctx)
			return node, err
		})
		for i := len(puuo.hooks) - 1; i >= 0; i-- {
			mut = puuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puuo *ProfileUKMUpdateOne) SaveX(ctx context.Context) *ProfileUKM {
	pu, err := puuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pu
}

// Exec executes the query on the entity.
func (puuo *ProfileUKMUpdateOne) Exec(ctx context.Context) error {
	_, err := puuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puuo *ProfileUKMUpdateOne) ExecX(ctx context.Context) {
	if err := puuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puuo *ProfileUKMUpdateOne) sqlSave(ctx context.Context) (pu *ProfileUKM, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   profileukm.Table,
			Columns: profileukm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profileukm.FieldID,
			},
		},
	}
	id, ok := puuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing ProfileUKM.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := puuo.mutation.Reason(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profileukm.FieldReason,
		})
	}
	if puuo.mutation.OwnerProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerProfileTable,
			Columns: []string{profileukm.OwnerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.OwnerProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerProfileTable,
			Columns: []string{profileukm.OwnerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.OwnerUkmCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerUkmTable,
			Columns: []string{profileukm.OwnerUkmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.OwnerUkmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerUkmTable,
			Columns: []string{profileukm.OwnerUkmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puuo.mutation.OwnerRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerRoleTable,
			Columns: []string{profileukm.OwnerRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roleukm.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puuo.mutation.OwnerRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerRoleTable,
			Columns: []string{profileukm.OwnerRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roleukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pu = &ProfileUKM{config: puuo.config}
	_spec.Assign = pu.assignValues
	_spec.ScanValues = pu.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profileukm.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pu, nil
}
