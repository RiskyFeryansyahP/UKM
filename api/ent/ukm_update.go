// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/confus1on/UKM/ent/announcement"
	"github.com/confus1on/UKM/ent/predicate"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UkmUpdate is the builder for updating Ukm entities.
type UkmUpdate struct {
	config
	hooks      []Hook
	mutation   *UkmMutation
	predicates []predicate.Ukm
}

// Where adds a new predicate for the builder.
func (uu *UkmUpdate) Where(ps ...predicate.Ukm) *UkmUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetName sets the name field.
func (uu *UkmUpdate) SetName(s string) *UkmUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetStatus sets the status field.
func (uu *UkmUpdate) SetStatus(u ukm.Status) *UkmUpdate {
	uu.mutation.SetStatus(u)
	return uu
}

// SetCreatedAt sets the created_at field.
func (uu *UkmUpdate) SetCreatedAt(t time.Time) *UkmUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uu *UkmUpdate) SetNillableCreatedAt(t *time.Time) *UkmUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the updated_at field.
func (uu *UkmUpdate) SetUpdatedAt(t time.Time) *UkmUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// AddProfileIDs adds the profiles edge to ProfileUKM by ids.
func (uu *UkmUpdate) AddProfileIDs(ids ...int) *UkmUpdate {
	uu.mutation.AddProfileIDs(ids...)
	return uu
}

// AddProfiles adds the profiles edges to ProfileUKM.
func (uu *UkmUpdate) AddProfiles(p ...*ProfileUKM) *UkmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddProfileIDs(ids...)
}

// AddAnnouncementIDs adds the announcement edge to Announcement by ids.
func (uu *UkmUpdate) AddAnnouncementIDs(ids ...int) *UkmUpdate {
	uu.mutation.AddAnnouncementIDs(ids...)
	return uu
}

// AddAnnouncement adds the announcement edges to Announcement.
func (uu *UkmUpdate) AddAnnouncement(a ...*Announcement) *UkmUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAnnouncementIDs(ids...)
}

// RemoveProfileIDs removes the profiles edge to ProfileUKM by ids.
func (uu *UkmUpdate) RemoveProfileIDs(ids ...int) *UkmUpdate {
	uu.mutation.RemoveProfileIDs(ids...)
	return uu
}

// RemoveProfiles removes profiles edges to ProfileUKM.
func (uu *UkmUpdate) RemoveProfiles(p ...*ProfileUKM) *UkmUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemoveProfileIDs(ids...)
}

// RemoveAnnouncementIDs removes the announcement edge to Announcement by ids.
func (uu *UkmUpdate) RemoveAnnouncementIDs(ids ...int) *UkmUpdate {
	uu.mutation.RemoveAnnouncementIDs(ids...)
	return uu
}

// RemoveAnnouncement removes announcement edges to Announcement.
func (uu *UkmUpdate) RemoveAnnouncement(a ...*Announcement) *UkmUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAnnouncementIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UkmUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := uu.mutation.Name(); ok {
		if err := ukm.NameValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if v, ok := uu.mutation.Status(); ok {
		if err := ukm.StatusValidator(v); err != nil {
			return 0, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := ukm.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}

	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UkmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UkmUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UkmUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UkmUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UkmUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ukm.Table,
			Columns: ukm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ukm.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ukm.FieldName,
		})
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ukm.FieldStatus,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldUpdatedAt,
		})
	}
	if nodes := uu.mutation.RemovedProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.ProfilesTable,
			Columns: []string{ukm.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.ProfilesTable,
			Columns: []string{ukm.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uu.mutation.RemovedAnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.AnnouncementTable,
			Columns: []string{ukm.AnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.AnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.AnnouncementTable,
			Columns: []string{ukm.AnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ukm.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UkmUpdateOne is the builder for updating a single Ukm entity.
type UkmUpdateOne struct {
	config
	hooks    []Hook
	mutation *UkmMutation
}

// SetName sets the name field.
func (uuo *UkmUpdateOne) SetName(s string) *UkmUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetStatus sets the status field.
func (uuo *UkmUpdateOne) SetStatus(u ukm.Status) *UkmUpdateOne {
	uuo.mutation.SetStatus(u)
	return uuo
}

// SetCreatedAt sets the created_at field.
func (uuo *UkmUpdateOne) SetCreatedAt(t time.Time) *UkmUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uuo *UkmUpdateOne) SetNillableCreatedAt(t *time.Time) *UkmUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the updated_at field.
func (uuo *UkmUpdateOne) SetUpdatedAt(t time.Time) *UkmUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// AddProfileIDs adds the profiles edge to ProfileUKM by ids.
func (uuo *UkmUpdateOne) AddProfileIDs(ids ...int) *UkmUpdateOne {
	uuo.mutation.AddProfileIDs(ids...)
	return uuo
}

// AddProfiles adds the profiles edges to ProfileUKM.
func (uuo *UkmUpdateOne) AddProfiles(p ...*ProfileUKM) *UkmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddProfileIDs(ids...)
}

// AddAnnouncementIDs adds the announcement edge to Announcement by ids.
func (uuo *UkmUpdateOne) AddAnnouncementIDs(ids ...int) *UkmUpdateOne {
	uuo.mutation.AddAnnouncementIDs(ids...)
	return uuo
}

// AddAnnouncement adds the announcement edges to Announcement.
func (uuo *UkmUpdateOne) AddAnnouncement(a ...*Announcement) *UkmUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAnnouncementIDs(ids...)
}

// RemoveProfileIDs removes the profiles edge to ProfileUKM by ids.
func (uuo *UkmUpdateOne) RemoveProfileIDs(ids ...int) *UkmUpdateOne {
	uuo.mutation.RemoveProfileIDs(ids...)
	return uuo
}

// RemoveProfiles removes profiles edges to ProfileUKM.
func (uuo *UkmUpdateOne) RemoveProfiles(p ...*ProfileUKM) *UkmUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemoveProfileIDs(ids...)
}

// RemoveAnnouncementIDs removes the announcement edge to Announcement by ids.
func (uuo *UkmUpdateOne) RemoveAnnouncementIDs(ids ...int) *UkmUpdateOne {
	uuo.mutation.RemoveAnnouncementIDs(ids...)
	return uuo
}

// RemoveAnnouncement removes announcement edges to Announcement.
func (uuo *UkmUpdateOne) RemoveAnnouncement(a ...*Announcement) *UkmUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAnnouncementIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (uuo *UkmUpdateOne) Save(ctx context.Context) (*Ukm, error) {
	if v, ok := uuo.mutation.Name(); ok {
		if err := ukm.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if v, ok := uuo.mutation.Status(); ok {
		if err := ukm.StatusValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := ukm.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}

	var (
		err  error
		node *Ukm
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UkmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UkmUpdateOne) SaveX(ctx context.Context) *Ukm {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UkmUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UkmUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UkmUpdateOne) sqlSave(ctx context.Context) (u *Ukm, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   ukm.Table,
			Columns: ukm.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ukm.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Ukm.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ukm.FieldName,
		})
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ukm.FieldStatus,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldUpdatedAt,
		})
	}
	if nodes := uuo.mutation.RemovedProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.ProfilesTable,
			Columns: []string{ukm.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.ProfilesTable,
			Columns: []string{ukm.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := uuo.mutation.RemovedAnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.AnnouncementTable,
			Columns: []string{ukm.AnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.AnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.AnnouncementTable,
			Columns: []string{ukm.AnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &Ukm{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ukm.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
