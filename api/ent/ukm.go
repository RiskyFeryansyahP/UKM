// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Ukm is the model entity for the Ukm schema.
type Ukm struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status ukm.Status `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UkmQuery when eager-loading is set.
	Edges UkmEdges `json:"edges"`
}

// UkmEdges holds the relations/edges for other nodes in the graph.
type UkmEdges struct {
	// Profiles holds the value of the profiles edge.
	Profiles []*ProfileUKM
	// Announcement holds the value of the announcement edge.
	Announcement []*Announcement
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfilesOrErr returns the Profiles value or an error if the edge
// was not loaded in eager-loading.
func (e UkmEdges) ProfilesOrErr() ([]*ProfileUKM, error) {
	if e.loadedTypes[0] {
		return e.Profiles, nil
	}
	return nil, &NotLoadedError{edge: "profiles"}
}

// AnnouncementOrErr returns the Announcement value or an error if the edge
// was not loaded in eager-loading.
func (e UkmEdges) AnnouncementOrErr() ([]*Announcement, error) {
	if e.loadedTypes[1] {
		return e.Announcement, nil
	}
	return nil, &NotLoadedError{edge: "announcement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ukm) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // status
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ukm fields.
func (u *Ukm) assignValues(values ...interface{}) error {
	if m, n := len(values), len(ukm.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	u.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		u.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status", values[1])
	} else if value.Valid {
		u.Status = ukm.Status(value.String)
	}
	if value, ok := values[2].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[2])
	} else if value.Valid {
		u.CreatedAt = value.Time
	}
	if value, ok := values[3].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[3])
	} else if value.Valid {
		u.UpdatedAt = value.Time
	}
	return nil
}

// QueryProfiles queries the profiles edge of the Ukm.
func (u *Ukm) QueryProfiles() *ProfileUKMQuery {
	return (&UkmClient{config: u.config}).QueryProfiles(u)
}

// QueryAnnouncement queries the announcement edge of the Ukm.
func (u *Ukm) QueryAnnouncement() *AnnouncementQuery {
	return (&UkmClient{config: u.config}).QueryAnnouncement(u)
}

// Update returns a builder for updating this Ukm.
// Note that, you need to call Ukm.Unwrap() before calling this method, if this Ukm
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *Ukm) Update() *UkmUpdateOne {
	return (&UkmClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (u *Ukm) Unwrap() *Ukm {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ukm is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *Ukm) String() string {
	var builder strings.Builder
	builder.WriteString("Ukm(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Ukms is a parsable slice of Ukm.
type Ukms []*Ukm

func (u Ukms) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
