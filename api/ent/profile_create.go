// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/confus1on/UKM/ent/profile"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/user"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
}

// SetFirstName sets the firstName field.
func (pc *ProfileCreate) SetFirstName(s string) *ProfileCreate {
	pc.mutation.SetFirstName(s)
	return pc
}

// SetLastName sets the lastName field.
func (pc *ProfileCreate) SetLastName(s string) *ProfileCreate {
	pc.mutation.SetLastName(s)
	return pc
}

// SetJk sets the jk field.
func (pc *ProfileCreate) SetJk(pr profile.Jk) *ProfileCreate {
	pc.mutation.SetJk(pr)
	return pc
}

// SetAddress sets the address field.
func (pc *ProfileCreate) SetAddress(s string) *ProfileCreate {
	pc.mutation.SetAddress(s)
	return pc
}

// SetNillableAddress sets the address field if the given value is not nil.
func (pc *ProfileCreate) SetNillableAddress(s *string) *ProfileCreate {
	if s != nil {
		pc.SetAddress(*s)
	}
	return pc
}

// SetBirthDate sets the birth_date field.
func (pc *ProfileCreate) SetBirthDate(s string) *ProfileCreate {
	pc.mutation.SetBirthDate(s)
	return pc
}

// SetNillableBirthDate sets the birth_date field if the given value is not nil.
func (pc *ProfileCreate) SetNillableBirthDate(s *string) *ProfileCreate {
	if s != nil {
		pc.SetBirthDate(*s)
	}
	return pc
}

// SetYearGeneration sets the year_generation field.
func (pc *ProfileCreate) SetYearGeneration(s string) *ProfileCreate {
	pc.mutation.SetYearGeneration(s)
	return pc
}

// SetPhone sets the phone field.
func (pc *ProfileCreate) SetPhone(s string) *ProfileCreate {
	pc.mutation.SetPhone(s)
	return pc
}

// SetStatus sets the status field.
func (pc *ProfileCreate) SetStatus(b bool) *ProfileCreate {
	pc.mutation.SetStatus(b)
	return pc
}

// SetNillableStatus sets the status field if the given value is not nil.
func (pc *ProfileCreate) SetNillableStatus(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetStatus(*b)
	}
	return pc
}

// SetImgProfile sets the img_profile field.
func (pc *ProfileCreate) SetImgProfile(s string) *ProfileCreate {
	pc.mutation.SetImgProfile(s)
	return pc
}

// SetNillableImgProfile sets the img_profile field if the given value is not nil.
func (pc *ProfileCreate) SetNillableImgProfile(s *string) *ProfileCreate {
	if s != nil {
		pc.SetImgProfile(*s)
	}
	return pc
}

// SetCreatedAt sets the created_at field.
func (pc *ProfileCreate) SetCreatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (pc *ProfileCreate) SetNillableCreatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the updated_at field.
func (pc *ProfileCreate) SetUpdatedAt(t time.Time) *ProfileCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (pc *ProfileCreate) SetNillableUpdatedAt(t *time.Time) *ProfileCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// AddOwnerIDs adds the owner edge to User by ids.
func (pc *ProfileCreate) AddOwnerIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddOwnerIDs(ids...)
	return pc
}

// AddOwner adds the owner edges to User.
func (pc *ProfileCreate) AddOwner(u ...*User) *ProfileCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return pc.AddOwnerIDs(ids...)
}

// AddUkmIDs adds the ukms edge to ProfileUKM by ids.
func (pc *ProfileCreate) AddUkmIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddUkmIDs(ids...)
	return pc
}

// AddUkms adds the ukms edges to ProfileUKM.
func (pc *ProfileCreate) AddUkms(p ...*ProfileUKM) *ProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddUkmIDs(ids...)
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	if _, ok := pc.mutation.FirstName(); !ok {
		return nil, errors.New("ent: missing required field \"firstName\"")
	}
	if v, ok := pc.mutation.FirstName(); ok {
		if err := profile.FirstNameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"firstName\": %v", err)
		}
	}
	if _, ok := pc.mutation.LastName(); !ok {
		return nil, errors.New("ent: missing required field \"lastName\"")
	}
	if v, ok := pc.mutation.LastName(); ok {
		if err := profile.LastNameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"lastName\": %v", err)
		}
	}
	if _, ok := pc.mutation.Jk(); !ok {
		return nil, errors.New("ent: missing required field \"jk\"")
	}
	if v, ok := pc.mutation.Jk(); ok {
		if err := profile.JkValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"jk\": %v", err)
		}
	}
	if _, ok := pc.mutation.YearGeneration(); !ok {
		return nil, errors.New("ent: missing required field \"year_generation\"")
	}
	if _, ok := pc.mutation.Phone(); !ok {
		return nil, errors.New("ent: missing required field \"phone\"")
	}
	if v, ok := pc.mutation.Phone(); ok {
		if err := profile.PhoneValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"phone\": %v", err)
		}
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := profile.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.ImgProfile(); !ok {
		v := profile.DefaultImgProfile
		pc.mutation.SetImgProfile(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := profile.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := profile.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if len(pc.mutation.OwnerIDs()) == 0 {
		return nil, errors.New("ent: missing required edge \"owner\"")
	}
	var (
		err  error
		node *Profile
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	var (
		pr    = &Profile{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profile.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profile.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.FirstName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldFirstName,
		})
		pr.FirstName = value
	}
	if value, ok := pc.mutation.LastName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldLastName,
		})
		pr.LastName = value
	}
	if value, ok := pc.mutation.Jk(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: profile.FieldJk,
		})
		pr.Jk = value
	}
	if value, ok := pc.mutation.Address(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldAddress,
		})
		pr.Address = value
	}
	if value, ok := pc.mutation.BirthDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldBirthDate,
		})
		pr.BirthDate = value
	}
	if value, ok := pc.mutation.YearGeneration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldYearGeneration,
		})
		pr.YearGeneration = value
	}
	if value, ok := pc.mutation.Phone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldPhone,
		})
		pr.Phone = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: profile.FieldStatus,
		})
		pr.Status = value
	}
	if value, ok := pc.mutation.ImgProfile(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profile.FieldImgProfile,
		})
		pr.ImgProfile = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldCreatedAt,
		})
		pr.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: profile.FieldUpdatedAt,
		})
		pr.UpdatedAt = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   profile.OwnerTable,
			Columns: []string{profile.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.UkmsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.UkmsTable,
			Columns: []string{profile.UkmsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}
