// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/confus1on/UKM/ent/announcement"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// UkmCreate is the builder for creating a Ukm entity.
type UkmCreate struct {
	config
	mutation *UkmMutation
	hooks    []Hook
}

// SetName sets the name field.
func (uc *UkmCreate) SetName(s string) *UkmCreate {
	uc.mutation.SetName(s)
	return uc
}

// SetStatus sets the status field.
func (uc *UkmCreate) SetStatus(u ukm.Status) *UkmCreate {
	uc.mutation.SetStatus(u)
	return uc
}

// SetCreatedAt sets the created_at field.
func (uc *UkmCreate) SetCreatedAt(t time.Time) *UkmCreate {
	uc.mutation.SetCreatedAt(t)
	return uc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (uc *UkmCreate) SetNillableCreatedAt(t *time.Time) *UkmCreate {
	if t != nil {
		uc.SetCreatedAt(*t)
	}
	return uc
}

// SetUpdatedAt sets the updated_at field.
func (uc *UkmCreate) SetUpdatedAt(t time.Time) *UkmCreate {
	uc.mutation.SetUpdatedAt(t)
	return uc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (uc *UkmCreate) SetNillableUpdatedAt(t *time.Time) *UkmCreate {
	if t != nil {
		uc.SetUpdatedAt(*t)
	}
	return uc
}

// AddProfileIDs adds the profiles edge to ProfileUKM by ids.
func (uc *UkmCreate) AddProfileIDs(ids ...int) *UkmCreate {
	uc.mutation.AddProfileIDs(ids...)
	return uc
}

// AddProfiles adds the profiles edges to ProfileUKM.
func (uc *UkmCreate) AddProfiles(p ...*ProfileUKM) *UkmCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uc.AddProfileIDs(ids...)
}

// AddAnnouncementIDs adds the announcement edge to Announcement by ids.
func (uc *UkmCreate) AddAnnouncementIDs(ids ...int) *UkmCreate {
	uc.mutation.AddAnnouncementIDs(ids...)
	return uc
}

// AddAnnouncement adds the announcement edges to Announcement.
func (uc *UkmCreate) AddAnnouncement(a ...*Announcement) *UkmCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uc.AddAnnouncementIDs(ids...)
}

// Save creates the Ukm in the database.
func (uc *UkmCreate) Save(ctx context.Context) (*Ukm, error) {
	if _, ok := uc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if v, ok := uc.mutation.Name(); ok {
		if err := ukm.NameValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"name\": %v", err)
		}
	}
	if _, ok := uc.mutation.Status(); !ok {
		return nil, errors.New("ent: missing required field \"status\"")
	}
	if v, ok := uc.mutation.Status(); ok {
		if err := ukm.StatusValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status\": %v", err)
		}
	}
	if _, ok := uc.mutation.CreatedAt(); !ok {
		v := ukm.DefaultCreatedAt()
		uc.mutation.SetCreatedAt(v)
	}
	if _, ok := uc.mutation.UpdatedAt(); !ok {
		v := ukm.DefaultUpdatedAt()
		uc.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *Ukm
	)
	if len(uc.hooks) == 0 {
		node, err = uc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UkmMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uc.mutation = mutation
			node, err = uc.sqlSave(ctx)
			return node, err
		})
		for i := len(uc.hooks) - 1; i >= 0; i-- {
			mut = uc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (uc *UkmCreate) SaveX(ctx context.Context) *Ukm {
	v, err := uc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (uc *UkmCreate) sqlSave(ctx context.Context) (*Ukm, error) {
	var (
		u     = &Ukm{config: uc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ukm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: ukm.FieldID,
			},
		}
	)
	if value, ok := uc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ukm.FieldName,
		})
		u.Name = value
	}
	if value, ok := uc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ukm.FieldStatus,
		})
		u.Status = value
	}
	if value, ok := uc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldCreatedAt,
		})
		u.CreatedAt = value
	}
	if value, ok := uc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ukm.FieldUpdatedAt,
		})
		u.UpdatedAt = value
	}
	if nodes := uc.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.ProfilesTable,
			Columns: []string{ukm.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := uc.mutation.AnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   ukm.AnnouncementTable,
			Columns: []string{ukm.AnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: announcement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, uc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	u.ID = int(id)
	return u, nil
}
