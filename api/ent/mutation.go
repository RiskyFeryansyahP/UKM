// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/confus1on/UKM/ent/announcement"
	"github.com/confus1on/UKM/ent/profile"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/role"
	"github.com/confus1on/UKM/ent/roleukm"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/confus1on/UKM/ent/user"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnnouncement = "Announcement"
	TypeProfile      = "Profile"
	TypeProfileUKM   = "ProfileUKM"
	TypeRole         = "Role"
	TypeRoleUKM      = "RoleUKM"
	TypeUkm          = "Ukm"
	TypeUser         = "User"
)

// AnnouncementMutation represents an operation that mutate the Announcements
// nodes in the graph.
type AnnouncementMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	title                     *string
	description               *string
	time                      *string
	clearedFields             map[string]struct{}
	owner_announcement        *int
	clearedowner_announcement bool
}

var _ ent.Mutation = (*AnnouncementMutation)(nil)

// newAnnouncementMutation creates new mutation for $n.Name.
func newAnnouncementMutation(c config, op Op) *AnnouncementMutation {
	return &AnnouncementMutation{
		config:        c,
		op:            op,
		typ:           TypeAnnouncement,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnnouncementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnnouncementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *AnnouncementMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the title field.
func (m *AnnouncementMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the title value in the mutation.
func (m *AnnouncementMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// ResetTitle reset all changes of the title field.
func (m *AnnouncementMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the description field.
func (m *AnnouncementMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the description value in the mutation.
func (m *AnnouncementMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// ResetDescription reset all changes of the description field.
func (m *AnnouncementMutation) ResetDescription() {
	m.description = nil
}

// SetTime sets the time field.
func (m *AnnouncementMutation) SetTime(s string) {
	m.time = &s
}

// Time returns the time value in the mutation.
func (m *AnnouncementMutation) Time() (r string, exists bool) {
	v := m.time
	if v == nil {
		return
	}
	return *v, true
}

// ResetTime reset all changes of the time field.
func (m *AnnouncementMutation) ResetTime() {
	m.time = nil
}

// SetOwnerAnnouncementID sets the owner_announcement edge to Ukm by id.
func (m *AnnouncementMutation) SetOwnerAnnouncementID(id int) {
	m.owner_announcement = &id
}

// ClearOwnerAnnouncement clears the owner_announcement edge to Ukm.
func (m *AnnouncementMutation) ClearOwnerAnnouncement() {
	m.clearedowner_announcement = true
}

// OwnerAnnouncementCleared returns if the edge owner_announcement was cleared.
func (m *AnnouncementMutation) OwnerAnnouncementCleared() bool {
	return m.clearedowner_announcement
}

// OwnerAnnouncementID returns the owner_announcement id in the mutation.
func (m *AnnouncementMutation) OwnerAnnouncementID() (id int, exists bool) {
	if m.owner_announcement != nil {
		return *m.owner_announcement, true
	}
	return
}

// OwnerAnnouncementIDs returns the owner_announcement ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerAnnouncementID instead. It exists only for internal usage by the builders.
func (m *AnnouncementMutation) OwnerAnnouncementIDs() (ids []int) {
	if id := m.owner_announcement; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerAnnouncement reset all changes of the owner_announcement edge.
func (m *AnnouncementMutation) ResetOwnerAnnouncement() {
	m.owner_announcement = nil
	m.clearedowner_announcement = false
}

// Op returns the operation name.
func (m *AnnouncementMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Announcement).
func (m *AnnouncementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *AnnouncementMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, announcement.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, announcement.FieldDescription)
	}
	if m.time != nil {
		fields = append(fields, announcement.FieldTime)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *AnnouncementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case announcement.FieldTitle:
		return m.Title()
	case announcement.FieldDescription:
		return m.Description()
	case announcement.FieldTime:
		return m.Time()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AnnouncementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case announcement.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case announcement.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case announcement.FieldTime:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTime(v)
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *AnnouncementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *AnnouncementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *AnnouncementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Announcement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *AnnouncementMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *AnnouncementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnnouncementMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Announcement nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *AnnouncementMutation) ResetField(name string) error {
	switch name {
	case announcement.FieldTitle:
		m.ResetTitle()
		return nil
	case announcement.FieldDescription:
		m.ResetDescription()
		return nil
	case announcement.FieldTime:
		m.ResetTime()
		return nil
	}
	return fmt.Errorf("unknown Announcement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *AnnouncementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner_announcement != nil {
		edges = append(edges, announcement.EdgeOwnerAnnouncement)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *AnnouncementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case announcement.EdgeOwnerAnnouncement:
		if id := m.owner_announcement; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *AnnouncementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *AnnouncementMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *AnnouncementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner_announcement {
		edges = append(edges, announcement.EdgeOwnerAnnouncement)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *AnnouncementMutation) EdgeCleared(name string) bool {
	switch name {
	case announcement.EdgeOwnerAnnouncement:
		return m.clearedowner_announcement
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *AnnouncementMutation) ClearEdge(name string) error {
	switch name {
	case announcement.EdgeOwnerAnnouncement:
		m.ClearOwnerAnnouncement()
		return nil
	}
	return fmt.Errorf("unknown Announcement unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *AnnouncementMutation) ResetEdge(name string) error {
	switch name {
	case announcement.EdgeOwnerAnnouncement:
		m.ResetOwnerAnnouncement()
		return nil
	}
	return fmt.Errorf("unknown Announcement edge %s", name)
}

// ProfileMutation represents an operation that mutate the Profiles
// nodes in the graph.
type ProfileMutation struct {
	config
	op              Op
	typ             string
	id              *int
	firstName       *string
	lastName        *string
	jk              *profile.Jk
	address         *string
	birth_date      *string
	year_generation *string
	phone           *string
	status          *bool
	img_profile     *string
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	owner           map[int]struct{}
	removedowner    map[int]struct{}
	ukms            map[int]struct{}
	removedukms     map[int]struct{}
}

var _ ent.Mutation = (*ProfileMutation)(nil)

// newProfileMutation creates new mutation for $n.Name.
func newProfileMutation(c config, op Op) *ProfileMutation {
	return &ProfileMutation{
		config:        c,
		op:            op,
		typ:           TypeProfile,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProfileMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFirstName sets the firstName field.
func (m *ProfileMutation) SetFirstName(s string) {
	m.firstName = &s
}

// FirstName returns the firstName value in the mutation.
func (m *ProfileMutation) FirstName() (r string, exists bool) {
	v := m.firstName
	if v == nil {
		return
	}
	return *v, true
}

// ResetFirstName reset all changes of the firstName field.
func (m *ProfileMutation) ResetFirstName() {
	m.firstName = nil
}

// SetLastName sets the lastName field.
func (m *ProfileMutation) SetLastName(s string) {
	m.lastName = &s
}

// LastName returns the lastName value in the mutation.
func (m *ProfileMutation) LastName() (r string, exists bool) {
	v := m.lastName
	if v == nil {
		return
	}
	return *v, true
}

// ResetLastName reset all changes of the lastName field.
func (m *ProfileMutation) ResetLastName() {
	m.lastName = nil
}

// SetJk sets the jk field.
func (m *ProfileMutation) SetJk(pr profile.Jk) {
	m.jk = &pr
}

// Jk returns the jk value in the mutation.
func (m *ProfileMutation) Jk() (r profile.Jk, exists bool) {
	v := m.jk
	if v == nil {
		return
	}
	return *v, true
}

// ResetJk reset all changes of the jk field.
func (m *ProfileMutation) ResetJk() {
	m.jk = nil
}

// SetAddress sets the address field.
func (m *ProfileMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the address value in the mutation.
func (m *ProfileMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// ClearAddress clears the value of address.
func (m *ProfileMutation) ClearAddress() {
	m.address = nil
	m.clearedFields[profile.FieldAddress] = struct{}{}
}

// AddressCleared returns if the field address was cleared in this mutation.
func (m *ProfileMutation) AddressCleared() bool {
	_, ok := m.clearedFields[profile.FieldAddress]
	return ok
}

// ResetAddress reset all changes of the address field.
func (m *ProfileMutation) ResetAddress() {
	m.address = nil
	delete(m.clearedFields, profile.FieldAddress)
}

// SetBirthDate sets the birth_date field.
func (m *ProfileMutation) SetBirthDate(s string) {
	m.birth_date = &s
}

// BirthDate returns the birth_date value in the mutation.
func (m *ProfileMutation) BirthDate() (r string, exists bool) {
	v := m.birth_date
	if v == nil {
		return
	}
	return *v, true
}

// ClearBirthDate clears the value of birth_date.
func (m *ProfileMutation) ClearBirthDate() {
	m.birth_date = nil
	m.clearedFields[profile.FieldBirthDate] = struct{}{}
}

// BirthDateCleared returns if the field birth_date was cleared in this mutation.
func (m *ProfileMutation) BirthDateCleared() bool {
	_, ok := m.clearedFields[profile.FieldBirthDate]
	return ok
}

// ResetBirthDate reset all changes of the birth_date field.
func (m *ProfileMutation) ResetBirthDate() {
	m.birth_date = nil
	delete(m.clearedFields, profile.FieldBirthDate)
}

// SetYearGeneration sets the year_generation field.
func (m *ProfileMutation) SetYearGeneration(s string) {
	m.year_generation = &s
}

// YearGeneration returns the year_generation value in the mutation.
func (m *ProfileMutation) YearGeneration() (r string, exists bool) {
	v := m.year_generation
	if v == nil {
		return
	}
	return *v, true
}

// ResetYearGeneration reset all changes of the year_generation field.
func (m *ProfileMutation) ResetYearGeneration() {
	m.year_generation = nil
}

// SetPhone sets the phone field.
func (m *ProfileMutation) SetPhone(s string) {
	m.phone = &s
}

// Phone returns the phone value in the mutation.
func (m *ProfileMutation) Phone() (r string, exists bool) {
	v := m.phone
	if v == nil {
		return
	}
	return *v, true
}

// ResetPhone reset all changes of the phone field.
func (m *ProfileMutation) ResetPhone() {
	m.phone = nil
}

// SetStatus sets the status field.
func (m *ProfileMutation) SetStatus(b bool) {
	m.status = &b
}

// Status returns the status value in the mutation.
func (m *ProfileMutation) Status() (r bool, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the status field.
func (m *ProfileMutation) ResetStatus() {
	m.status = nil
}

// SetImgProfile sets the img_profile field.
func (m *ProfileMutation) SetImgProfile(s string) {
	m.img_profile = &s
}

// ImgProfile returns the img_profile value in the mutation.
func (m *ProfileMutation) ImgProfile() (r string, exists bool) {
	v := m.img_profile
	if v == nil {
		return
	}
	return *v, true
}

// ResetImgProfile reset all changes of the img_profile field.
func (m *ProfileMutation) ResetImgProfile() {
	m.img_profile = nil
}

// SetCreatedAt sets the created_at field.
func (m *ProfileMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *ProfileMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *ProfileMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *ProfileMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *ProfileMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *ProfileMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddOwnerIDs adds the owner edge to User by ids.
func (m *ProfileMutation) AddOwnerIDs(ids ...int) {
	if m.owner == nil {
		m.owner = make(map[int]struct{})
	}
	for i := range ids {
		m.owner[ids[i]] = struct{}{}
	}
}

// RemoveOwnerIDs removes the owner edge to User by ids.
func (m *ProfileMutation) RemoveOwnerIDs(ids ...int) {
	if m.removedowner == nil {
		m.removedowner = make(map[int]struct{})
	}
	for i := range ids {
		m.removedowner[ids[i]] = struct{}{}
	}
}

// RemovedOwner returns the removed ids of owner.
func (m *ProfileMutation) RemovedOwnerIDs() (ids []int) {
	for id := range m.removedowner {
		ids = append(ids, id)
	}
	return
}

// OwnerIDs returns the owner ids in the mutation.
func (m *ProfileMutation) OwnerIDs() (ids []int) {
	for id := range m.owner {
		ids = append(ids, id)
	}
	return
}

// ResetOwner reset all changes of the owner edge.
func (m *ProfileMutation) ResetOwner() {
	m.owner = nil
	m.removedowner = nil
}

// AddUkmIDs adds the ukms edge to ProfileUKM by ids.
func (m *ProfileMutation) AddUkmIDs(ids ...int) {
	if m.ukms == nil {
		m.ukms = make(map[int]struct{})
	}
	for i := range ids {
		m.ukms[ids[i]] = struct{}{}
	}
}

// RemoveUkmIDs removes the ukms edge to ProfileUKM by ids.
func (m *ProfileMutation) RemoveUkmIDs(ids ...int) {
	if m.removedukms == nil {
		m.removedukms = make(map[int]struct{})
	}
	for i := range ids {
		m.removedukms[ids[i]] = struct{}{}
	}
}

// RemovedUkms returns the removed ids of ukms.
func (m *ProfileMutation) RemovedUkmsIDs() (ids []int) {
	for id := range m.removedukms {
		ids = append(ids, id)
	}
	return
}

// UkmsIDs returns the ukms ids in the mutation.
func (m *ProfileMutation) UkmsIDs() (ids []int) {
	for id := range m.ukms {
		ids = append(ids, id)
	}
	return
}

// ResetUkms reset all changes of the ukms edge.
func (m *ProfileMutation) ResetUkms() {
	m.ukms = nil
	m.removedukms = nil
}

// Op returns the operation name.
func (m *ProfileMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Profile).
func (m *ProfileMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProfileMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.firstName != nil {
		fields = append(fields, profile.FieldFirstName)
	}
	if m.lastName != nil {
		fields = append(fields, profile.FieldLastName)
	}
	if m.jk != nil {
		fields = append(fields, profile.FieldJk)
	}
	if m.address != nil {
		fields = append(fields, profile.FieldAddress)
	}
	if m.birth_date != nil {
		fields = append(fields, profile.FieldBirthDate)
	}
	if m.year_generation != nil {
		fields = append(fields, profile.FieldYearGeneration)
	}
	if m.phone != nil {
		fields = append(fields, profile.FieldPhone)
	}
	if m.status != nil {
		fields = append(fields, profile.FieldStatus)
	}
	if m.img_profile != nil {
		fields = append(fields, profile.FieldImgProfile)
	}
	if m.created_at != nil {
		fields = append(fields, profile.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, profile.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProfileMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profile.FieldFirstName:
		return m.FirstName()
	case profile.FieldLastName:
		return m.LastName()
	case profile.FieldJk:
		return m.Jk()
	case profile.FieldAddress:
		return m.Address()
	case profile.FieldBirthDate:
		return m.BirthDate()
	case profile.FieldYearGeneration:
		return m.YearGeneration()
	case profile.FieldPhone:
		return m.Phone()
	case profile.FieldStatus:
		return m.Status()
	case profile.FieldImgProfile:
		return m.ImgProfile()
	case profile.FieldCreatedAt:
		return m.CreatedAt()
	case profile.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProfileMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profile.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case profile.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case profile.FieldJk:
		v, ok := value.(profile.Jk)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJk(v)
		return nil
	case profile.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	case profile.FieldBirthDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthDate(v)
		return nil
	case profile.FieldYearGeneration:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetYearGeneration(v)
		return nil
	case profile.FieldPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case profile.FieldStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case profile.FieldImgProfile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImgProfile(v)
		return nil
	case profile.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case profile.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProfileMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProfileMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProfileMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProfileMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(profile.FieldAddress) {
		fields = append(fields, profile.FieldAddress)
	}
	if m.FieldCleared(profile.FieldBirthDate) {
		fields = append(fields, profile.FieldBirthDate)
	}
	return fields
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProfileMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileMutation) ClearField(name string) error {
	switch name {
	case profile.FieldAddress:
		m.ClearAddress()
		return nil
	case profile.FieldBirthDate:
		m.ClearBirthDate()
		return nil
	}
	return fmt.Errorf("unknown Profile nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProfileMutation) ResetField(name string) error {
	switch name {
	case profile.FieldFirstName:
		m.ResetFirstName()
		return nil
	case profile.FieldLastName:
		m.ResetLastName()
		return nil
	case profile.FieldJk:
		m.ResetJk()
		return nil
	case profile.FieldAddress:
		m.ResetAddress()
		return nil
	case profile.FieldBirthDate:
		m.ResetBirthDate()
		return nil
	case profile.FieldYearGeneration:
		m.ResetYearGeneration()
		return nil
	case profile.FieldPhone:
		m.ResetPhone()
		return nil
	case profile.FieldStatus:
		m.ResetStatus()
		return nil
	case profile.FieldImgProfile:
		m.ResetImgProfile()
		return nil
	case profile.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case profile.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Profile field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProfileMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.owner != nil {
		edges = append(edges, profile.EdgeOwner)
	}
	if m.ukms != nil {
		edges = append(edges, profile.EdgeUkms)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProfileMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.owner))
		for id := range m.owner {
			ids = append(ids, id)
		}
		return ids
	case profile.EdgeUkms:
		ids := make([]ent.Value, 0, len(m.ukms))
		for id := range m.ukms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProfileMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedowner != nil {
		edges = append(edges, profile.EdgeOwner)
	}
	if m.removedukms != nil {
		edges = append(edges, profile.EdgeUkms)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProfileMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case profile.EdgeOwner:
		ids := make([]ent.Value, 0, len(m.removedowner))
		for id := range m.removedowner {
			ids = append(ids, id)
		}
		return ids
	case profile.EdgeUkms:
		ids := make([]ent.Value, 0, len(m.removedukms))
		for id := range m.removedukms {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProfileMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProfileMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProfileMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Profile unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProfileMutation) ResetEdge(name string) error {
	switch name {
	case profile.EdgeOwner:
		m.ResetOwner()
		return nil
	case profile.EdgeUkms:
		m.ResetUkms()
		return nil
	}
	return fmt.Errorf("unknown Profile edge %s", name)
}

// ProfileUKMMutation represents an operation that mutate the ProfileUKMs
// nodes in the graph.
type ProfileUKMMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	reason               *string
	clearedFields        map[string]struct{}
	owner_profile        *int
	clearedowner_profile bool
	owner_ukm            *int
	clearedowner_ukm     bool
	owner_role           *int
	clearedowner_role    bool
}

var _ ent.Mutation = (*ProfileUKMMutation)(nil)

// newProfileUKMMutation creates new mutation for $n.Name.
func newProfileUKMMutation(c config, op Op) *ProfileUKMMutation {
	return &ProfileUKMMutation{
		config:        c,
		op:            op,
		typ:           TypeProfileUKM,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProfileUKMMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProfileUKMMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProfileUKMMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetReason sets the reason field.
func (m *ProfileUKMMutation) SetReason(s string) {
	m.reason = &s
}

// Reason returns the reason value in the mutation.
func (m *ProfileUKMMutation) Reason() (r string, exists bool) {
	v := m.reason
	if v == nil {
		return
	}
	return *v, true
}

// ResetReason reset all changes of the reason field.
func (m *ProfileUKMMutation) ResetReason() {
	m.reason = nil
}

// SetOwnerProfileID sets the owner_profile edge to Profile by id.
func (m *ProfileUKMMutation) SetOwnerProfileID(id int) {
	m.owner_profile = &id
}

// ClearOwnerProfile clears the owner_profile edge to Profile.
func (m *ProfileUKMMutation) ClearOwnerProfile() {
	m.clearedowner_profile = true
}

// OwnerProfileCleared returns if the edge owner_profile was cleared.
func (m *ProfileUKMMutation) OwnerProfileCleared() bool {
	return m.clearedowner_profile
}

// OwnerProfileID returns the owner_profile id in the mutation.
func (m *ProfileUKMMutation) OwnerProfileID() (id int, exists bool) {
	if m.owner_profile != nil {
		return *m.owner_profile, true
	}
	return
}

// OwnerProfileIDs returns the owner_profile ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerProfileID instead. It exists only for internal usage by the builders.
func (m *ProfileUKMMutation) OwnerProfileIDs() (ids []int) {
	if id := m.owner_profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerProfile reset all changes of the owner_profile edge.
func (m *ProfileUKMMutation) ResetOwnerProfile() {
	m.owner_profile = nil
	m.clearedowner_profile = false
}

// SetOwnerUkmID sets the owner_ukm edge to Ukm by id.
func (m *ProfileUKMMutation) SetOwnerUkmID(id int) {
	m.owner_ukm = &id
}

// ClearOwnerUkm clears the owner_ukm edge to Ukm.
func (m *ProfileUKMMutation) ClearOwnerUkm() {
	m.clearedowner_ukm = true
}

// OwnerUkmCleared returns if the edge owner_ukm was cleared.
func (m *ProfileUKMMutation) OwnerUkmCleared() bool {
	return m.clearedowner_ukm
}

// OwnerUkmID returns the owner_ukm id in the mutation.
func (m *ProfileUKMMutation) OwnerUkmID() (id int, exists bool) {
	if m.owner_ukm != nil {
		return *m.owner_ukm, true
	}
	return
}

// OwnerUkmIDs returns the owner_ukm ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerUkmID instead. It exists only for internal usage by the builders.
func (m *ProfileUKMMutation) OwnerUkmIDs() (ids []int) {
	if id := m.owner_ukm; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerUkm reset all changes of the owner_ukm edge.
func (m *ProfileUKMMutation) ResetOwnerUkm() {
	m.owner_ukm = nil
	m.clearedowner_ukm = false
}

// SetOwnerRoleID sets the owner_role edge to RoleUKM by id.
func (m *ProfileUKMMutation) SetOwnerRoleID(id int) {
	m.owner_role = &id
}

// ClearOwnerRole clears the owner_role edge to RoleUKM.
func (m *ProfileUKMMutation) ClearOwnerRole() {
	m.clearedowner_role = true
}

// OwnerRoleCleared returns if the edge owner_role was cleared.
func (m *ProfileUKMMutation) OwnerRoleCleared() bool {
	return m.clearedowner_role
}

// OwnerRoleID returns the owner_role id in the mutation.
func (m *ProfileUKMMutation) OwnerRoleID() (id int, exists bool) {
	if m.owner_role != nil {
		return *m.owner_role, true
	}
	return
}

// OwnerRoleIDs returns the owner_role ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// OwnerRoleID instead. It exists only for internal usage by the builders.
func (m *ProfileUKMMutation) OwnerRoleIDs() (ids []int) {
	if id := m.owner_role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwnerRole reset all changes of the owner_role edge.
func (m *ProfileUKMMutation) ResetOwnerRole() {
	m.owner_role = nil
	m.clearedowner_role = false
}

// Op returns the operation name.
func (m *ProfileUKMMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (ProfileUKM).
func (m *ProfileUKMMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProfileUKMMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.reason != nil {
		fields = append(fields, profileukm.FieldReason)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProfileUKMMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case profileukm.FieldReason:
		return m.Reason()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProfileUKMMutation) SetField(name string, value ent.Value) error {
	switch name {
	case profileukm.FieldReason:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReason(v)
		return nil
	}
	return fmt.Errorf("unknown ProfileUKM field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProfileUKMMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProfileUKMMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProfileUKMMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProfileUKM numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProfileUKMMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProfileUKMMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProfileUKMMutation) ClearField(name string) error {
	return fmt.Errorf("unknown ProfileUKM nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProfileUKMMutation) ResetField(name string) error {
	switch name {
	case profileukm.FieldReason:
		m.ResetReason()
		return nil
	}
	return fmt.Errorf("unknown ProfileUKM field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProfileUKMMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.owner_profile != nil {
		edges = append(edges, profileukm.EdgeOwnerProfile)
	}
	if m.owner_ukm != nil {
		edges = append(edges, profileukm.EdgeOwnerUkm)
	}
	if m.owner_role != nil {
		edges = append(edges, profileukm.EdgeOwnerRole)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProfileUKMMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case profileukm.EdgeOwnerProfile:
		if id := m.owner_profile; id != nil {
			return []ent.Value{*id}
		}
	case profileukm.EdgeOwnerUkm:
		if id := m.owner_ukm; id != nil {
			return []ent.Value{*id}
		}
	case profileukm.EdgeOwnerRole:
		if id := m.owner_role; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProfileUKMMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProfileUKMMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProfileUKMMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedowner_profile {
		edges = append(edges, profileukm.EdgeOwnerProfile)
	}
	if m.clearedowner_ukm {
		edges = append(edges, profileukm.EdgeOwnerUkm)
	}
	if m.clearedowner_role {
		edges = append(edges, profileukm.EdgeOwnerRole)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProfileUKMMutation) EdgeCleared(name string) bool {
	switch name {
	case profileukm.EdgeOwnerProfile:
		return m.clearedowner_profile
	case profileukm.EdgeOwnerUkm:
		return m.clearedowner_ukm
	case profileukm.EdgeOwnerRole:
		return m.clearedowner_role
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProfileUKMMutation) ClearEdge(name string) error {
	switch name {
	case profileukm.EdgeOwnerProfile:
		m.ClearOwnerProfile()
		return nil
	case profileukm.EdgeOwnerUkm:
		m.ClearOwnerUkm()
		return nil
	case profileukm.EdgeOwnerRole:
		m.ClearOwnerRole()
		return nil
	}
	return fmt.Errorf("unknown ProfileUKM unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProfileUKMMutation) ResetEdge(name string) error {
	switch name {
	case profileukm.EdgeOwnerProfile:
		m.ResetOwnerProfile()
		return nil
	case profileukm.EdgeOwnerUkm:
		m.ResetOwnerUkm()
		return nil
	case profileukm.EdgeOwnerRole:
		m.ResetOwnerRole()
		return nil
	}
	return fmt.Errorf("unknown ProfileUKM edge %s", name)
}

// RoleMutation represents an operation that mutate the Roles
// nodes in the graph.
type RoleMutation struct {
	config
	op            Op
	typ           string
	id            *int
	value         *string
	clearedFields map[string]struct{}
	access        map[int]struct{}
	removedaccess map[int]struct{}
}

var _ ent.Mutation = (*RoleMutation)(nil)

// newRoleMutation creates new mutation for $n.Name.
func newRoleMutation(c config, op Op) *RoleMutation {
	return &RoleMutation{
		config:        c,
		op:            op,
		typ:           TypeRole,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoleMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetValue sets the value field.
func (m *RoleMutation) SetValue(s string) {
	m.value = &s
}

// Value returns the value value in the mutation.
func (m *RoleMutation) Value() (r string, exists bool) {
	v := m.value
	if v == nil {
		return
	}
	return *v, true
}

// ResetValue reset all changes of the value field.
func (m *RoleMutation) ResetValue() {
	m.value = nil
}

// AddAccesIDs adds the access edge to User by ids.
func (m *RoleMutation) AddAccesIDs(ids ...int) {
	if m.access == nil {
		m.access = make(map[int]struct{})
	}
	for i := range ids {
		m.access[ids[i]] = struct{}{}
	}
}

// RemoveAccesIDs removes the access edge to User by ids.
func (m *RoleMutation) RemoveAccesIDs(ids ...int) {
	if m.removedaccess == nil {
		m.removedaccess = make(map[int]struct{})
	}
	for i := range ids {
		m.removedaccess[ids[i]] = struct{}{}
	}
}

// RemovedAccess returns the removed ids of access.
func (m *RoleMutation) RemovedAccessIDs() (ids []int) {
	for id := range m.removedaccess {
		ids = append(ids, id)
	}
	return
}

// AccessIDs returns the access ids in the mutation.
func (m *RoleMutation) AccessIDs() (ids []int) {
	for id := range m.access {
		ids = append(ids, id)
	}
	return
}

// ResetAccess reset all changes of the access edge.
func (m *RoleMutation) ResetAccess() {
	m.access = nil
	m.removedaccess = nil
}

// Op returns the operation name.
func (m *RoleMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Role).
func (m *RoleMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoleMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.value != nil {
		fields = append(fields, role.FieldValue)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoleMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case role.FieldValue:
		return m.Value()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleMutation) SetField(name string, value ent.Value) error {
	switch name {
	case role.FieldValue:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetValue(v)
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoleMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoleMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Role numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoleMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoleMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Role nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoleMutation) ResetField(name string) error {
	switch name {
	case role.FieldValue:
		m.ResetValue()
		return nil
	}
	return fmt.Errorf("unknown Role field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoleMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.access != nil {
		edges = append(edges, role.EdgeAccess)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoleMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeAccess:
		ids := make([]ent.Value, 0, len(m.access))
		for id := range m.access {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoleMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedaccess != nil {
		edges = append(edges, role.EdgeAccess)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoleMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case role.EdgeAccess:
		ids := make([]ent.Value, 0, len(m.removedaccess))
		for id := range m.removedaccess {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoleMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoleMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoleMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Role unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoleMutation) ResetEdge(name string) error {
	switch name {
	case role.EdgeAccess:
		m.ResetAccess()
		return nil
	}
	return fmt.Errorf("unknown Role edge %s", name)
}

// RoleUKMMutation represents an operation that mutate the RoleUKMs
// nodes in the graph.
type RoleUKMMutation struct {
	config
	op                   Op
	typ                  string
	id                   *int
	status_role          *string
	clearedFields        map[string]struct{}
	profile_roles        map[int]struct{}
	removedprofile_roles map[int]struct{}
}

var _ ent.Mutation = (*RoleUKMMutation)(nil)

// newRoleUKMMutation creates new mutation for $n.Name.
func newRoleUKMMutation(c config, op Op) *RoleUKMMutation {
	return &RoleUKMMutation{
		config:        c,
		op:            op,
		typ:           TypeRoleUKM,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RoleUKMMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RoleUKMMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RoleUKMMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetStatusRole sets the status_role field.
func (m *RoleUKMMutation) SetStatusRole(s string) {
	m.status_role = &s
}

// StatusRole returns the status_role value in the mutation.
func (m *RoleUKMMutation) StatusRole() (r string, exists bool) {
	v := m.status_role
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatusRole reset all changes of the status_role field.
func (m *RoleUKMMutation) ResetStatusRole() {
	m.status_role = nil
}

// AddProfileRoleIDs adds the profile_roles edge to ProfileUKM by ids.
func (m *RoleUKMMutation) AddProfileRoleIDs(ids ...int) {
	if m.profile_roles == nil {
		m.profile_roles = make(map[int]struct{})
	}
	for i := range ids {
		m.profile_roles[ids[i]] = struct{}{}
	}
}

// RemoveProfileRoleIDs removes the profile_roles edge to ProfileUKM by ids.
func (m *RoleUKMMutation) RemoveProfileRoleIDs(ids ...int) {
	if m.removedprofile_roles == nil {
		m.removedprofile_roles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprofile_roles[ids[i]] = struct{}{}
	}
}

// RemovedProfileRoles returns the removed ids of profile_roles.
func (m *RoleUKMMutation) RemovedProfileRolesIDs() (ids []int) {
	for id := range m.removedprofile_roles {
		ids = append(ids, id)
	}
	return
}

// ProfileRolesIDs returns the profile_roles ids in the mutation.
func (m *RoleUKMMutation) ProfileRolesIDs() (ids []int) {
	for id := range m.profile_roles {
		ids = append(ids, id)
	}
	return
}

// ResetProfileRoles reset all changes of the profile_roles edge.
func (m *RoleUKMMutation) ResetProfileRoles() {
	m.profile_roles = nil
	m.removedprofile_roles = nil
}

// Op returns the operation name.
func (m *RoleUKMMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RoleUKM).
func (m *RoleUKMMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RoleUKMMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.status_role != nil {
		fields = append(fields, roleukm.FieldStatusRole)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RoleUKMMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case roleukm.FieldStatusRole:
		return m.StatusRole()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleUKMMutation) SetField(name string, value ent.Value) error {
	switch name {
	case roleukm.FieldStatusRole:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusRole(v)
		return nil
	}
	return fmt.Errorf("unknown RoleUKM field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RoleUKMMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RoleUKMMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RoleUKMMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RoleUKM numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RoleUKMMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RoleUKMMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RoleUKMMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RoleUKM nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RoleUKMMutation) ResetField(name string) error {
	switch name {
	case roleukm.FieldStatusRole:
		m.ResetStatusRole()
		return nil
	}
	return fmt.Errorf("unknown RoleUKM field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RoleUKMMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.profile_roles != nil {
		edges = append(edges, roleukm.EdgeProfileRoles)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RoleUKMMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case roleukm.EdgeProfileRoles:
		ids := make([]ent.Value, 0, len(m.profile_roles))
		for id := range m.profile_roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RoleUKMMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprofile_roles != nil {
		edges = append(edges, roleukm.EdgeProfileRoles)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RoleUKMMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case roleukm.EdgeProfileRoles:
		ids := make([]ent.Value, 0, len(m.removedprofile_roles))
		for id := range m.removedprofile_roles {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RoleUKMMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RoleUKMMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RoleUKMMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown RoleUKM unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RoleUKMMutation) ResetEdge(name string) error {
	switch name {
	case roleukm.EdgeProfileRoles:
		m.ResetProfileRoles()
		return nil
	}
	return fmt.Errorf("unknown RoleUKM edge %s", name)
}

// UkmMutation represents an operation that mutate the Ukms
// nodes in the graph.
type UkmMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	name                *string
	status              *ukm.Status
	created_at          *time.Time
	updated_at          *time.Time
	clearedFields       map[string]struct{}
	profiles            map[int]struct{}
	removedprofiles     map[int]struct{}
	announcement        map[int]struct{}
	removedannouncement map[int]struct{}
}

var _ ent.Mutation = (*UkmMutation)(nil)

// newUkmMutation creates new mutation for $n.Name.
func newUkmMutation(c config, op Op) *UkmMutation {
	return &UkmMutation{
		config:        c,
		op:            op,
		typ:           TypeUkm,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UkmMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UkmMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UkmMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the name field.
func (m *UkmMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *UkmMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *UkmMutation) ResetName() {
	m.name = nil
}

// SetStatus sets the status field.
func (m *UkmMutation) SetStatus(u ukm.Status) {
	m.status = &u
}

// Status returns the status value in the mutation.
func (m *UkmMutation) Status() (r ukm.Status, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// ResetStatus reset all changes of the status field.
func (m *UkmMutation) ResetStatus() {
	m.status = nil
}

// SetCreatedAt sets the created_at field.
func (m *UkmMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UkmMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *UkmMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *UkmMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UkmMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *UkmMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddProfileIDs adds the profiles edge to ProfileUKM by ids.
func (m *UkmMutation) AddProfileIDs(ids ...int) {
	if m.profiles == nil {
		m.profiles = make(map[int]struct{})
	}
	for i := range ids {
		m.profiles[ids[i]] = struct{}{}
	}
}

// RemoveProfileIDs removes the profiles edge to ProfileUKM by ids.
func (m *UkmMutation) RemoveProfileIDs(ids ...int) {
	if m.removedprofiles == nil {
		m.removedprofiles = make(map[int]struct{})
	}
	for i := range ids {
		m.removedprofiles[ids[i]] = struct{}{}
	}
}

// RemovedProfiles returns the removed ids of profiles.
func (m *UkmMutation) RemovedProfilesIDs() (ids []int) {
	for id := range m.removedprofiles {
		ids = append(ids, id)
	}
	return
}

// ProfilesIDs returns the profiles ids in the mutation.
func (m *UkmMutation) ProfilesIDs() (ids []int) {
	for id := range m.profiles {
		ids = append(ids, id)
	}
	return
}

// ResetProfiles reset all changes of the profiles edge.
func (m *UkmMutation) ResetProfiles() {
	m.profiles = nil
	m.removedprofiles = nil
}

// AddAnnouncementIDs adds the announcement edge to Announcement by ids.
func (m *UkmMutation) AddAnnouncementIDs(ids ...int) {
	if m.announcement == nil {
		m.announcement = make(map[int]struct{})
	}
	for i := range ids {
		m.announcement[ids[i]] = struct{}{}
	}
}

// RemoveAnnouncementIDs removes the announcement edge to Announcement by ids.
func (m *UkmMutation) RemoveAnnouncementIDs(ids ...int) {
	if m.removedannouncement == nil {
		m.removedannouncement = make(map[int]struct{})
	}
	for i := range ids {
		m.removedannouncement[ids[i]] = struct{}{}
	}
}

// RemovedAnnouncement returns the removed ids of announcement.
func (m *UkmMutation) RemovedAnnouncementIDs() (ids []int) {
	for id := range m.removedannouncement {
		ids = append(ids, id)
	}
	return
}

// AnnouncementIDs returns the announcement ids in the mutation.
func (m *UkmMutation) AnnouncementIDs() (ids []int) {
	for id := range m.announcement {
		ids = append(ids, id)
	}
	return
}

// ResetAnnouncement reset all changes of the announcement edge.
func (m *UkmMutation) ResetAnnouncement() {
	m.announcement = nil
	m.removedannouncement = nil
}

// Op returns the operation name.
func (m *UkmMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Ukm).
func (m *UkmMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UkmMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, ukm.FieldName)
	}
	if m.status != nil {
		fields = append(fields, ukm.FieldStatus)
	}
	if m.created_at != nil {
		fields = append(fields, ukm.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ukm.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UkmMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ukm.FieldName:
		return m.Name()
	case ukm.FieldStatus:
		return m.Status()
	case ukm.FieldCreatedAt:
		return m.CreatedAt()
	case ukm.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UkmMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ukm.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ukm.FieldStatus:
		v, ok := value.(ukm.Status)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case ukm.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ukm.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Ukm field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UkmMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UkmMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UkmMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Ukm numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UkmMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UkmMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UkmMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Ukm nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UkmMutation) ResetField(name string) error {
	switch name {
	case ukm.FieldName:
		m.ResetName()
		return nil
	case ukm.FieldStatus:
		m.ResetStatus()
		return nil
	case ukm.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ukm.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Ukm field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UkmMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.profiles != nil {
		edges = append(edges, ukm.EdgeProfiles)
	}
	if m.announcement != nil {
		edges = append(edges, ukm.EdgeAnnouncement)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UkmMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ukm.EdgeProfiles:
		ids := make([]ent.Value, 0, len(m.profiles))
		for id := range m.profiles {
			ids = append(ids, id)
		}
		return ids
	case ukm.EdgeAnnouncement:
		ids := make([]ent.Value, 0, len(m.announcement))
		for id := range m.announcement {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UkmMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedprofiles != nil {
		edges = append(edges, ukm.EdgeProfiles)
	}
	if m.removedannouncement != nil {
		edges = append(edges, ukm.EdgeAnnouncement)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UkmMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case ukm.EdgeProfiles:
		ids := make([]ent.Value, 0, len(m.removedprofiles))
		for id := range m.removedprofiles {
			ids = append(ids, id)
		}
		return ids
	case ukm.EdgeAnnouncement:
		ids := make([]ent.Value, 0, len(m.removedannouncement))
		for id := range m.removedannouncement {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UkmMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UkmMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UkmMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Ukm unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UkmMutation) ResetEdge(name string) error {
	switch name {
	case ukm.EdgeProfiles:
		m.ResetProfiles()
		return nil
	case ukm.EdgeAnnouncement:
		m.ResetAnnouncement()
		return nil
	}
	return fmt.Errorf("unknown Ukm edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op             Op
	typ            string
	id             *int
	email          *string
	password       *string
	created_at     *time.Time
	updated_at     *time.Time
	clearedFields  map[string]struct{}
	profile        *int
	clearedprofile bool
	role           *int
	clearedrole    bool
}

var _ ent.Mutation = (*UserMutation)(nil)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op) *UserMutation {
	return &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetEmail sets the email field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// ResetEmail reset all changes of the email field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetPassword sets the password field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// ResetPassword reset all changes of the password field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetCreatedAt sets the created_at field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetProfileID sets the profile edge to Profile by id.
func (m *UserMutation) SetProfileID(id int) {
	m.profile = &id
}

// ClearProfile clears the profile edge to Profile.
func (m *UserMutation) ClearProfile() {
	m.clearedprofile = true
}

// ProfileCleared returns if the edge profile was cleared.
func (m *UserMutation) ProfileCleared() bool {
	return m.clearedprofile
}

// ProfileID returns the profile id in the mutation.
func (m *UserMutation) ProfileID() (id int, exists bool) {
	if m.profile != nil {
		return *m.profile, true
	}
	return
}

// ProfileIDs returns the profile ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProfileID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProfileIDs() (ids []int) {
	if id := m.profile; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProfile reset all changes of the profile edge.
func (m *UserMutation) ResetProfile() {
	m.profile = nil
	m.clearedprofile = false
}

// SetRoleID sets the role edge to Role by id.
func (m *UserMutation) SetRoleID(id int) {
	m.role = &id
}

// ClearRole clears the role edge to Role.
func (m *UserMutation) ClearRole() {
	m.clearedrole = true
}

// RoleCleared returns if the edge role was cleared.
func (m *UserMutation) RoleCleared() bool {
	return m.clearedrole
}

// RoleID returns the role id in the mutation.
func (m *UserMutation) RoleID() (id int, exists bool) {
	if m.role != nil {
		return *m.role, true
	}
	return
}

// RoleIDs returns the role ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RoleID instead. It exists only for internal usage by the builders.
func (m *UserMutation) RoleIDs() (ids []int) {
	if id := m.role; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRole reset all changes of the role edge.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.clearedrole = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldEmail:
		return m.Email()
	case user.FieldPassword:
		return m.Password()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.profile != nil {
		edges = append(edges, user.EdgeProfile)
	}
	if m.role != nil {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeProfile:
		if id := m.profile; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeRole:
		if id := m.role; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedprofile {
		edges = append(edges, user.EdgeProfile)
	}
	if m.clearedrole {
		edges = append(edges, user.EdgeRole)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeProfile:
		return m.clearedprofile
	case user.EdgeRole:
		return m.clearedrole
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeProfile:
		m.ClearProfile()
		return nil
	case user.EdgeRole:
		m.ClearRole()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeProfile:
		m.ResetProfile()
		return nil
	case user.EdgeRole:
		m.ResetRole()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
