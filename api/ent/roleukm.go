// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/confus1on/UKM/ent/roleukm"
	"github.com/facebookincubator/ent/dialect/sql"
)

// RoleUKM is the model entity for the RoleUKM schema.
type RoleUKM struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// StatusRole holds the value of the "status_role" field.
	StatusRole string `json:"status_role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleUKMQuery when eager-loading is set.
	Edges RoleUKMEdges `json:"edges"`
}

// RoleUKMEdges holds the relations/edges for other nodes in the graph.
type RoleUKMEdges struct {
	// ProfileRoles holds the value of the profile_roles edge.
	ProfileRoles []*ProfileUKM
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProfileRolesOrErr returns the ProfileRoles value or an error if the edge
// was not loaded in eager-loading.
func (e RoleUKMEdges) ProfileRolesOrErr() ([]*ProfileUKM, error) {
	if e.loadedTypes[0] {
		return e.ProfileRoles, nil
	}
	return nil, &NotLoadedError{edge: "profile_roles"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleUKM) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // status_role
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleUKM fields.
func (ru *RoleUKM) assignValues(values ...interface{}) error {
	if m, n := len(values), len(roleukm.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ru.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field status_role", values[0])
	} else if value.Valid {
		ru.StatusRole = value.String
	}
	return nil
}

// QueryProfileRoles queries the profile_roles edge of the RoleUKM.
func (ru *RoleUKM) QueryProfileRoles() *ProfileUKMQuery {
	return (&RoleUKMClient{config: ru.config}).QueryProfileRoles(ru)
}

// Update returns a builder for updating this RoleUKM.
// Note that, you need to call RoleUKM.Unwrap() before calling this method, if this RoleUKM
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RoleUKM) Update() *RoleUKMUpdateOne {
	return (&RoleUKMClient{config: ru.config}).UpdateOne(ru)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ru *RoleUKM) Unwrap() *RoleUKM {
	tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleUKM is not a transactional entity")
	}
	ru.config.driver = tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RoleUKM) String() string {
	var builder strings.Builder
	builder.WriteString("RoleUKM(")
	builder.WriteString(fmt.Sprintf("id=%v", ru.ID))
	builder.WriteString(", status_role=")
	builder.WriteString(ru.StatusRole)
	builder.WriteByte(')')
	return builder.String()
}

// RoleUKMs is a parsable slice of RoleUKM.
type RoleUKMs []*RoleUKM

func (ru RoleUKMs) config(cfg config) {
	for _i := range ru {
		ru[_i].config = cfg
	}
}
