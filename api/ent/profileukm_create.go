// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/confus1on/UKM/ent/profile"
	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/roleukm"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// ProfileUKMCreate is the builder for creating a ProfileUKM entity.
type ProfileUKMCreate struct {
	config
	mutation *ProfileUKMMutation
	hooks    []Hook
}

// SetReason sets the reason field.
func (puc *ProfileUKMCreate) SetReason(s string) *ProfileUKMCreate {
	puc.mutation.SetReason(s)
	return puc
}

// SetOwnerProfileID sets the owner_profile edge to Profile by id.
func (puc *ProfileUKMCreate) SetOwnerProfileID(id int) *ProfileUKMCreate {
	puc.mutation.SetOwnerProfileID(id)
	return puc
}

// SetNillableOwnerProfileID sets the owner_profile edge to Profile by id if the given value is not nil.
func (puc *ProfileUKMCreate) SetNillableOwnerProfileID(id *int) *ProfileUKMCreate {
	if id != nil {
		puc = puc.SetOwnerProfileID(*id)
	}
	return puc
}

// SetOwnerProfile sets the owner_profile edge to Profile.
func (puc *ProfileUKMCreate) SetOwnerProfile(p *Profile) *ProfileUKMCreate {
	return puc.SetOwnerProfileID(p.ID)
}

// SetOwnerUkmID sets the owner_ukm edge to Ukm by id.
func (puc *ProfileUKMCreate) SetOwnerUkmID(id int) *ProfileUKMCreate {
	puc.mutation.SetOwnerUkmID(id)
	return puc
}

// SetNillableOwnerUkmID sets the owner_ukm edge to Ukm by id if the given value is not nil.
func (puc *ProfileUKMCreate) SetNillableOwnerUkmID(id *int) *ProfileUKMCreate {
	if id != nil {
		puc = puc.SetOwnerUkmID(*id)
	}
	return puc
}

// SetOwnerUkm sets the owner_ukm edge to Ukm.
func (puc *ProfileUKMCreate) SetOwnerUkm(u *Ukm) *ProfileUKMCreate {
	return puc.SetOwnerUkmID(u.ID)
}

// SetOwnerRoleID sets the owner_role edge to RoleUKM by id.
func (puc *ProfileUKMCreate) SetOwnerRoleID(id int) *ProfileUKMCreate {
	puc.mutation.SetOwnerRoleID(id)
	return puc
}

// SetNillableOwnerRoleID sets the owner_role edge to RoleUKM by id if the given value is not nil.
func (puc *ProfileUKMCreate) SetNillableOwnerRoleID(id *int) *ProfileUKMCreate {
	if id != nil {
		puc = puc.SetOwnerRoleID(*id)
	}
	return puc
}

// SetOwnerRole sets the owner_role edge to RoleUKM.
func (puc *ProfileUKMCreate) SetOwnerRole(r *RoleUKM) *ProfileUKMCreate {
	return puc.SetOwnerRoleID(r.ID)
}

// Save creates the ProfileUKM in the database.
func (puc *ProfileUKMCreate) Save(ctx context.Context) (*ProfileUKM, error) {
	if _, ok := puc.mutation.Reason(); !ok {
		return nil, errors.New("ent: missing required field \"reason\"")
	}
	if v, ok := puc.mutation.Reason(); ok {
		if err := profileukm.ReasonValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"reason\": %v", err)
		}
	}
	var (
		err  error
		node *ProfileUKM
	)
	if len(puc.hooks) == 0 {
		node, err = puc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfileUKMMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puc.mutation = mutation
			node, err = puc.sqlSave(ctx)
			return node, err
		})
		for i := len(puc.hooks) - 1; i >= 0; i-- {
			mut = puc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (puc *ProfileUKMCreate) SaveX(ctx context.Context) *ProfileUKM {
	v, err := puc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (puc *ProfileUKMCreate) sqlSave(ctx context.Context) (*ProfileUKM, error) {
	var (
		pu    = &ProfileUKM{config: puc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: profileukm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: profileukm.FieldID,
			},
		}
	)
	if value, ok := puc.mutation.Reason(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: profileukm.FieldReason,
		})
		pu.Reason = value
	}
	if nodes := puc.mutation.OwnerProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerProfileTable,
			Columns: []string{profileukm.OwnerProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profile.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.OwnerUkmIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerUkmTable,
			Columns: []string{profileukm.OwnerUkmColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.OwnerRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileukm.OwnerRoleTable,
			Columns: []string{profileukm.OwnerRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: roleukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, puc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pu.ID = int(id)
	return pu, nil
}
