// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/confus1on/UKM/ent/profileukm"
	"github.com/confus1on/UKM/ent/roleukm"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// RoleUKMCreate is the builder for creating a RoleUKM entity.
type RoleUKMCreate struct {
	config
	mutation *RoleUKMMutation
	hooks    []Hook
}

// SetStatusRole sets the status_role field.
func (ruc *RoleUKMCreate) SetStatusRole(s string) *RoleUKMCreate {
	ruc.mutation.SetStatusRole(s)
	return ruc
}

// AddProfileRoleIDs adds the profile_roles edge to ProfileUKM by ids.
func (ruc *RoleUKMCreate) AddProfileRoleIDs(ids ...int) *RoleUKMCreate {
	ruc.mutation.AddProfileRoleIDs(ids...)
	return ruc
}

// AddProfileRoles adds the profile_roles edges to ProfileUKM.
func (ruc *RoleUKMCreate) AddProfileRoles(p ...*ProfileUKM) *RoleUKMCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ruc.AddProfileRoleIDs(ids...)
}

// Save creates the RoleUKM in the database.
func (ruc *RoleUKMCreate) Save(ctx context.Context) (*RoleUKM, error) {
	if _, ok := ruc.mutation.StatusRole(); !ok {
		return nil, errors.New("ent: missing required field \"status_role\"")
	}
	if v, ok := ruc.mutation.StatusRole(); ok {
		if err := roleukm.StatusRoleValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"status_role\": %v", err)
		}
	}
	var (
		err  error
		node *RoleUKM
	)
	if len(ruc.hooks) == 0 {
		node, err = ruc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RoleUKMMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruc.mutation = mutation
			node, err = ruc.sqlSave(ctx)
			return node, err
		})
		for i := len(ruc.hooks) - 1; i >= 0; i-- {
			mut = ruc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RoleUKMCreate) SaveX(ctx context.Context) *RoleUKM {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ruc *RoleUKMCreate) sqlSave(ctx context.Context) (*RoleUKM, error) {
	var (
		ru    = &RoleUKM{config: ruc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: roleukm.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: roleukm.FieldID,
			},
		}
	)
	if value, ok := ruc.mutation.StatusRole(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: roleukm.FieldStatusRole,
		})
		ru.StatusRole = value
	}
	if nodes := ruc.mutation.ProfileRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   roleukm.ProfileRolesTable,
			Columns: []string{roleukm.ProfileRolesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: profileukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ru.ID = int(id)
	return ru, nil
}
