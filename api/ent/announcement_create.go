// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/confus1on/UKM/ent/announcement"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// AnnouncementCreate is the builder for creating a Announcement entity.
type AnnouncementCreate struct {
	config
	mutation *AnnouncementMutation
	hooks    []Hook
}

// SetTitle sets the title field.
func (ac *AnnouncementCreate) SetTitle(s string) *AnnouncementCreate {
	ac.mutation.SetTitle(s)
	return ac
}

// SetDescription sets the description field.
func (ac *AnnouncementCreate) SetDescription(s string) *AnnouncementCreate {
	ac.mutation.SetDescription(s)
	return ac
}

// SetTime sets the time field.
func (ac *AnnouncementCreate) SetTime(s string) *AnnouncementCreate {
	ac.mutation.SetTime(s)
	return ac
}

// SetOwnerAnnouncementID sets the owner_announcement edge to Ukm by id.
func (ac *AnnouncementCreate) SetOwnerAnnouncementID(id int) *AnnouncementCreate {
	ac.mutation.SetOwnerAnnouncementID(id)
	return ac
}

// SetNillableOwnerAnnouncementID sets the owner_announcement edge to Ukm by id if the given value is not nil.
func (ac *AnnouncementCreate) SetNillableOwnerAnnouncementID(id *int) *AnnouncementCreate {
	if id != nil {
		ac = ac.SetOwnerAnnouncementID(*id)
	}
	return ac
}

// SetOwnerAnnouncement sets the owner_announcement edge to Ukm.
func (ac *AnnouncementCreate) SetOwnerAnnouncement(u *Ukm) *AnnouncementCreate {
	return ac.SetOwnerAnnouncementID(u.ID)
}

// Save creates the Announcement in the database.
func (ac *AnnouncementCreate) Save(ctx context.Context) (*Announcement, error) {
	if _, ok := ac.mutation.Title(); !ok {
		return nil, errors.New("ent: missing required field \"title\"")
	}
	if v, ok := ac.mutation.Title(); ok {
		if err := announcement.TitleValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"title\": %v", err)
		}
	}
	if _, ok := ac.mutation.Description(); !ok {
		return nil, errors.New("ent: missing required field \"description\"")
	}
	if v, ok := ac.mutation.Description(); ok {
		if err := announcement.DescriptionValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"description\": %v", err)
		}
	}
	if _, ok := ac.mutation.Time(); !ok {
		return nil, errors.New("ent: missing required field \"time\"")
	}
	if v, ok := ac.mutation.Time(); ok {
		if err := announcement.TimeValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"time\": %v", err)
		}
	}
	var (
		err  error
		node *Announcement
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnnouncementMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AnnouncementCreate) SaveX(ctx context.Context) *Announcement {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *AnnouncementCreate) sqlSave(ctx context.Context) (*Announcement, error) {
	var (
		a     = &Announcement{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: announcement.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: announcement.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTitle,
		})
		a.Title = value
	}
	if value, ok := ac.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldDescription,
		})
		a.Description = value
	}
	if value, ok := ac.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: announcement.FieldTime,
		})
		a.Time = value
	}
	if nodes := ac.mutation.OwnerAnnouncementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   announcement.OwnerAnnouncementTable,
			Columns: []string{announcement.OwnerAnnouncementColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: ukm.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}
