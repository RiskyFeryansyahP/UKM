// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/confus1on/UKM/ent/announcement"
	"github.com/confus1on/UKM/ent/ukm"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Announcement is the model entity for the Announcement schema.
type Announcement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Time holds the value of the "time" field.
	Time string `json:"time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnnouncementQuery when eager-loading is set.
	Edges            AnnouncementEdges `json:"edges"`
	ukm_announcement *int
}

// AnnouncementEdges holds the relations/edges for other nodes in the graph.
type AnnouncementEdges struct {
	// OwnerAnnouncement holds the value of the owner_announcement edge.
	OwnerAnnouncement *Ukm
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerAnnouncementOrErr returns the OwnerAnnouncement value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnnouncementEdges) OwnerAnnouncementOrErr() (*Ukm, error) {
	if e.loadedTypes[0] {
		if e.OwnerAnnouncement == nil {
			// The edge owner_announcement was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: ukm.Label}
		}
		return e.OwnerAnnouncement, nil
	}
	return nil, &NotLoadedError{edge: "owner_announcement"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Announcement) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // title
		&sql.NullString{}, // description
		&sql.NullString{}, // time
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Announcement) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // ukm_announcement
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Announcement fields.
func (a *Announcement) assignValues(values ...interface{}) error {
	if m, n := len(values), len(announcement.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	a.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field title", values[0])
	} else if value.Valid {
		a.Title = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field description", values[1])
	} else if value.Valid {
		a.Description = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field time", values[2])
	} else if value.Valid {
		a.Time = value.String
	}
	values = values[3:]
	if len(values) == len(announcement.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field ukm_announcement", value)
		} else if value.Valid {
			a.ukm_announcement = new(int)
			*a.ukm_announcement = int(value.Int64)
		}
	}
	return nil
}

// QueryOwnerAnnouncement queries the owner_announcement edge of the Announcement.
func (a *Announcement) QueryOwnerAnnouncement() *UkmQuery {
	return (&AnnouncementClient{config: a.config}).QueryOwnerAnnouncement(a)
}

// Update returns a builder for updating this Announcement.
// Note that, you need to call Announcement.Unwrap() before calling this method, if this Announcement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Announcement) Update() *AnnouncementUpdateOne {
	return (&AnnouncementClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (a *Announcement) Unwrap() *Announcement {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Announcement is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Announcement) String() string {
	var builder strings.Builder
	builder.WriteString("Announcement(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	builder.WriteString(", title=")
	builder.WriteString(a.Title)
	builder.WriteString(", description=")
	builder.WriteString(a.Description)
	builder.WriteString(", time=")
	builder.WriteString(a.Time)
	builder.WriteByte(')')
	return builder.String()
}

// Announcements is a parsable slice of Announcement.
type Announcements []*Announcement

func (a Announcements) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
