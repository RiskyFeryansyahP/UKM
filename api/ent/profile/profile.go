// Code generated by entc, DO NOT EDIT.

package profile

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the profile type in the database.
	Label = "profile"
	// FieldID holds the string denoting the id field in the database.
	FieldID             = "id"              // FieldFirstName holds the string denoting the firstname vertex property in the database.
	FieldFirstName      = "first_name"      // FieldLastName holds the string denoting the lastname vertex property in the database.
	FieldLastName       = "last_name"       // FieldJk holds the string denoting the jk vertex property in the database.
	FieldJk             = "jk"              // FieldAddress holds the string denoting the address vertex property in the database.
	FieldAddress        = "address"         // FieldBirthDate holds the string denoting the birth_date vertex property in the database.
	FieldBirthDate      = "birth_date"      // FieldYearGeneration holds the string denoting the year_generation vertex property in the database.
	FieldYearGeneration = "year_generation" // FieldPhone holds the string denoting the phone vertex property in the database.
	FieldPhone          = "phone"           // FieldStatus holds the string denoting the status vertex property in the database.
	FieldStatus         = "status"          // FieldImgProfile holds the string denoting the img_profile vertex property in the database.
	FieldImgProfile     = "img_profile"     // FieldCreatedAt holds the string denoting the created_at vertex property in the database.
	FieldCreatedAt      = "created_at"      // FieldUpdatedAt holds the string denoting the updated_at vertex property in the database.
	FieldUpdatedAt      = "updated_at"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeUkms holds the string denoting the ukms edge name in mutations.
	EdgeUkms = "ukms"

	// Table holds the table name of the profile in the database.
	Table = "profiles"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "users"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_profile"
	// UkmsTable is the table the holds the ukms relation/edge.
	UkmsTable = "profile_ukm"
	// UkmsInverseTable is the table name for the ProfileUKM entity.
	// It exists in this package in order to avoid circular dependency with the "profileukm" package.
	UkmsInverseTable = "profile_ukm"
	// UkmsColumn is the table column denoting the ukms relation/edge.
	UkmsColumn = "profile_ukms"
)

// Columns holds all SQL columns for profile fields.
var Columns = []string{
	FieldID,
	FieldFirstName,
	FieldLastName,
	FieldJk,
	FieldAddress,
	FieldBirthDate,
	FieldYearGeneration,
	FieldPhone,
	FieldStatus,
	FieldImgProfile,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	FirstNameValidator func(string) error
	// LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	LastNameValidator func(string) error
	// PhoneValidator is a validator for the "phone" field. It is called by the builders before save.
	PhoneValidator func(string) error
	// DefaultStatus holds the default value on creation for the status field.
	DefaultStatus bool
	// DefaultImgProfile holds the default value on creation for the img_profile field.
	DefaultImgProfile string
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Jk defines the type for the jk enum field.
type Jk string

// Jk values.
const (
	JkMale   Jk = "Male"
	JkFemale Jk = "Female"
	JkNone   Jk = "None"
)

func (s Jk) String() string {
	return string(s)
}

// JkValidator is a validator for the "j" field enum values. It is called by the builders before save.
func JkValidator(j Jk) error {
	switch j {
	case JkMale, JkFemale, JkNone:
		return nil
	default:
		return fmt.Errorf("profile: invalid enum value for jk field: %q", j)
	}
}
