// Code generated by entc, DO NOT EDIT.

package profile

import (
	"time"

	"github.com/confus1on/UKM/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FirstName applies equality check predicate on the "firstName" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// LastName applies equality check predicate on the "lastName" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// Alamat applies equality check predicate on the "alamat" field. It's identical to AlamatEQ.
func Alamat(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlamat), v))
	})
}

// TanggalLahir applies equality check predicate on the "tanggal_lahir" field. It's identical to TanggalLahirEQ.
func TanggalLahir(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTanggalLahir), v))
	})
}

// YearGeneration applies equality check predicate on the "year_generation" field. It's identical to YearGenerationEQ.
func YearGeneration(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearGeneration), v))
	})
}

// Phone applies equality check predicate on the "phone" field. It's identical to PhoneEQ.
func Phone(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// ImgProfile applies equality check predicate on the "img_profile" field. It's identical to ImgProfileEQ.
func ImgProfile(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgProfile), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// FirstNameEQ applies the EQ predicate on the "firstName" field.
func FirstNameEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFirstName), v))
	})
}

// FirstNameNEQ applies the NEQ predicate on the "firstName" field.
func FirstNameNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFirstName), v))
	})
}

// FirstNameIn applies the In predicate on the "firstName" field.
func FirstNameIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFirstName), v...))
	})
}

// FirstNameNotIn applies the NotIn predicate on the "firstName" field.
func FirstNameNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFirstName), v...))
	})
}

// FirstNameGT applies the GT predicate on the "firstName" field.
func FirstNameGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFirstName), v))
	})
}

// FirstNameGTE applies the GTE predicate on the "firstName" field.
func FirstNameGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFirstName), v))
	})
}

// FirstNameLT applies the LT predicate on the "firstName" field.
func FirstNameLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFirstName), v))
	})
}

// FirstNameLTE applies the LTE predicate on the "firstName" field.
func FirstNameLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFirstName), v))
	})
}

// FirstNameContains applies the Contains predicate on the "firstName" field.
func FirstNameContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFirstName), v))
	})
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "firstName" field.
func FirstNameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFirstName), v))
	})
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "firstName" field.
func FirstNameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFirstName), v))
	})
}

// FirstNameEqualFold applies the EqualFold predicate on the "firstName" field.
func FirstNameEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFirstName), v))
	})
}

// FirstNameContainsFold applies the ContainsFold predicate on the "firstName" field.
func FirstNameContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFirstName), v))
	})
}

// LastNameEQ applies the EQ predicate on the "lastName" field.
func LastNameEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastName), v))
	})
}

// LastNameNEQ applies the NEQ predicate on the "lastName" field.
func LastNameNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastName), v))
	})
}

// LastNameIn applies the In predicate on the "lastName" field.
func LastNameIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastName), v...))
	})
}

// LastNameNotIn applies the NotIn predicate on the "lastName" field.
func LastNameNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastName), v...))
	})
}

// LastNameGT applies the GT predicate on the "lastName" field.
func LastNameGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastName), v))
	})
}

// LastNameGTE applies the GTE predicate on the "lastName" field.
func LastNameGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastName), v))
	})
}

// LastNameLT applies the LT predicate on the "lastName" field.
func LastNameLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastName), v))
	})
}

// LastNameLTE applies the LTE predicate on the "lastName" field.
func LastNameLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastName), v))
	})
}

// LastNameContains applies the Contains predicate on the "lastName" field.
func LastNameContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLastName), v))
	})
}

// LastNameHasPrefix applies the HasPrefix predicate on the "lastName" field.
func LastNameHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLastName), v))
	})
}

// LastNameHasSuffix applies the HasSuffix predicate on the "lastName" field.
func LastNameHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLastName), v))
	})
}

// LastNameEqualFold applies the EqualFold predicate on the "lastName" field.
func LastNameEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLastName), v))
	})
}

// LastNameContainsFold applies the ContainsFold predicate on the "lastName" field.
func LastNameContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLastName), v))
	})
}

// JkEQ applies the EQ predicate on the "jk" field.
func JkEQ(v Jk) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJk), v))
	})
}

// JkNEQ applies the NEQ predicate on the "jk" field.
func JkNEQ(v Jk) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJk), v))
	})
}

// JkIn applies the In predicate on the "jk" field.
func JkIn(vs ...Jk) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJk), v...))
	})
}

// JkNotIn applies the NotIn predicate on the "jk" field.
func JkNotIn(vs ...Jk) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJk), v...))
	})
}

// AlamatEQ applies the EQ predicate on the "alamat" field.
func AlamatEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAlamat), v))
	})
}

// AlamatNEQ applies the NEQ predicate on the "alamat" field.
func AlamatNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAlamat), v))
	})
}

// AlamatIn applies the In predicate on the "alamat" field.
func AlamatIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAlamat), v...))
	})
}

// AlamatNotIn applies the NotIn predicate on the "alamat" field.
func AlamatNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAlamat), v...))
	})
}

// AlamatGT applies the GT predicate on the "alamat" field.
func AlamatGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAlamat), v))
	})
}

// AlamatGTE applies the GTE predicate on the "alamat" field.
func AlamatGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAlamat), v))
	})
}

// AlamatLT applies the LT predicate on the "alamat" field.
func AlamatLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAlamat), v))
	})
}

// AlamatLTE applies the LTE predicate on the "alamat" field.
func AlamatLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAlamat), v))
	})
}

// AlamatContains applies the Contains predicate on the "alamat" field.
func AlamatContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAlamat), v))
	})
}

// AlamatHasPrefix applies the HasPrefix predicate on the "alamat" field.
func AlamatHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAlamat), v))
	})
}

// AlamatHasSuffix applies the HasSuffix predicate on the "alamat" field.
func AlamatHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAlamat), v))
	})
}

// AlamatIsNil applies the IsNil predicate on the "alamat" field.
func AlamatIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAlamat)))
	})
}

// AlamatNotNil applies the NotNil predicate on the "alamat" field.
func AlamatNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAlamat)))
	})
}

// AlamatEqualFold applies the EqualFold predicate on the "alamat" field.
func AlamatEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAlamat), v))
	})
}

// AlamatContainsFold applies the ContainsFold predicate on the "alamat" field.
func AlamatContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAlamat), v))
	})
}

// TanggalLahirEQ applies the EQ predicate on the "tanggal_lahir" field.
func TanggalLahirEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirNEQ applies the NEQ predicate on the "tanggal_lahir" field.
func TanggalLahirNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirIn applies the In predicate on the "tanggal_lahir" field.
func TanggalLahirIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTanggalLahir), v...))
	})
}

// TanggalLahirNotIn applies the NotIn predicate on the "tanggal_lahir" field.
func TanggalLahirNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTanggalLahir), v...))
	})
}

// TanggalLahirGT applies the GT predicate on the "tanggal_lahir" field.
func TanggalLahirGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirGTE applies the GTE predicate on the "tanggal_lahir" field.
func TanggalLahirGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirLT applies the LT predicate on the "tanggal_lahir" field.
func TanggalLahirLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirLTE applies the LTE predicate on the "tanggal_lahir" field.
func TanggalLahirLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirContains applies the Contains predicate on the "tanggal_lahir" field.
func TanggalLahirContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirHasPrefix applies the HasPrefix predicate on the "tanggal_lahir" field.
func TanggalLahirHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirHasSuffix applies the HasSuffix predicate on the "tanggal_lahir" field.
func TanggalLahirHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirIsNil applies the IsNil predicate on the "tanggal_lahir" field.
func TanggalLahirIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTanggalLahir)))
	})
}

// TanggalLahirNotNil applies the NotNil predicate on the "tanggal_lahir" field.
func TanggalLahirNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTanggalLahir)))
	})
}

// TanggalLahirEqualFold applies the EqualFold predicate on the "tanggal_lahir" field.
func TanggalLahirEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTanggalLahir), v))
	})
}

// TanggalLahirContainsFold applies the ContainsFold predicate on the "tanggal_lahir" field.
func TanggalLahirContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTanggalLahir), v))
	})
}

// YearGenerationEQ applies the EQ predicate on the "year_generation" field.
func YearGenerationEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationNEQ applies the NEQ predicate on the "year_generation" field.
func YearGenerationNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationIn applies the In predicate on the "year_generation" field.
func YearGenerationIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldYearGeneration), v...))
	})
}

// YearGenerationNotIn applies the NotIn predicate on the "year_generation" field.
func YearGenerationNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldYearGeneration), v...))
	})
}

// YearGenerationGT applies the GT predicate on the "year_generation" field.
func YearGenerationGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationGTE applies the GTE predicate on the "year_generation" field.
func YearGenerationGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationLT applies the LT predicate on the "year_generation" field.
func YearGenerationLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationLTE applies the LTE predicate on the "year_generation" field.
func YearGenerationLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationContains applies the Contains predicate on the "year_generation" field.
func YearGenerationContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationHasPrefix applies the HasPrefix predicate on the "year_generation" field.
func YearGenerationHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationHasSuffix applies the HasSuffix predicate on the "year_generation" field.
func YearGenerationHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationEqualFold applies the EqualFold predicate on the "year_generation" field.
func YearGenerationEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYearGeneration), v))
	})
}

// YearGenerationContainsFold applies the ContainsFold predicate on the "year_generation" field.
func YearGenerationContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYearGeneration), v))
	})
}

// PhoneEQ applies the EQ predicate on the "phone" field.
func PhoneEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPhone), v))
	})
}

// PhoneNEQ applies the NEQ predicate on the "phone" field.
func PhoneNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPhone), v))
	})
}

// PhoneIn applies the In predicate on the "phone" field.
func PhoneIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPhone), v...))
	})
}

// PhoneNotIn applies the NotIn predicate on the "phone" field.
func PhoneNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPhone), v...))
	})
}

// PhoneGT applies the GT predicate on the "phone" field.
func PhoneGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPhone), v))
	})
}

// PhoneGTE applies the GTE predicate on the "phone" field.
func PhoneGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPhone), v))
	})
}

// PhoneLT applies the LT predicate on the "phone" field.
func PhoneLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPhone), v))
	})
}

// PhoneLTE applies the LTE predicate on the "phone" field.
func PhoneLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPhone), v))
	})
}

// PhoneContains applies the Contains predicate on the "phone" field.
func PhoneContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPhone), v))
	})
}

// PhoneHasPrefix applies the HasPrefix predicate on the "phone" field.
func PhoneHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPhone), v))
	})
}

// PhoneHasSuffix applies the HasSuffix predicate on the "phone" field.
func PhoneHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPhone), v))
	})
}

// PhoneEqualFold applies the EqualFold predicate on the "phone" field.
func PhoneEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPhone), v))
	})
}

// PhoneContainsFold applies the ContainsFold predicate on the "phone" field.
func PhoneContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPhone), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// ImgProfileEQ applies the EQ predicate on the "img_profile" field.
func ImgProfileEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldImgProfile), v))
	})
}

// ImgProfileNEQ applies the NEQ predicate on the "img_profile" field.
func ImgProfileNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldImgProfile), v))
	})
}

// ImgProfileIn applies the In predicate on the "img_profile" field.
func ImgProfileIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldImgProfile), v...))
	})
}

// ImgProfileNotIn applies the NotIn predicate on the "img_profile" field.
func ImgProfileNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldImgProfile), v...))
	})
}

// ImgProfileGT applies the GT predicate on the "img_profile" field.
func ImgProfileGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldImgProfile), v))
	})
}

// ImgProfileGTE applies the GTE predicate on the "img_profile" field.
func ImgProfileGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldImgProfile), v))
	})
}

// ImgProfileLT applies the LT predicate on the "img_profile" field.
func ImgProfileLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldImgProfile), v))
	})
}

// ImgProfileLTE applies the LTE predicate on the "img_profile" field.
func ImgProfileLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldImgProfile), v))
	})
}

// ImgProfileContains applies the Contains predicate on the "img_profile" field.
func ImgProfileContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldImgProfile), v))
	})
}

// ImgProfileHasPrefix applies the HasPrefix predicate on the "img_profile" field.
func ImgProfileHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldImgProfile), v))
	})
}

// ImgProfileHasSuffix applies the HasSuffix predicate on the "img_profile" field.
func ImgProfileHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldImgProfile), v))
	})
}

// ImgProfileEqualFold applies the EqualFold predicate on the "img_profile" field.
func ImgProfileEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldImgProfile), v))
	})
}

// ImgProfileContainsFold applies the ContainsFold predicate on the "img_profile" field.
func ImgProfileContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldImgProfile), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(vs) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUkm applies the HasEdge predicate on the "ukm" edge.
func HasUkm() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UkmTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UkmTable, UkmPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUkmWith applies the HasEdge predicate on the "ukm" edge with a given conditions (other predicates).
func HasUkmWith(preds ...predicate.Ukm) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UkmInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, UkmTable, UkmPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		p(s.Not())
	})
}
