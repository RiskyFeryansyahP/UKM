// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/confus1on/UKM/internal/model"
	utils "github.com/confus1on/UKM/internal/utils"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecaseAnnouncement is a mock of UsecaseAnnouncement interface
type MockUsecaseAnnouncement struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseAnnouncementMockRecorder
}

// MockUsecaseAnnouncementMockRecorder is the mock recorder for MockUsecaseAnnouncement
type MockUsecaseAnnouncementMockRecorder struct {
	mock *MockUsecaseAnnouncement
}

// NewMockUsecaseAnnouncement creates a new mock instance
func NewMockUsecaseAnnouncement(ctrl *gomock.Controller) *MockUsecaseAnnouncement {
	mock := &MockUsecaseAnnouncement{ctrl: ctrl}
	mock.recorder = &MockUsecaseAnnouncementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseAnnouncement) EXPECT() *MockUsecaseAnnouncementMockRecorder {
	return m.recorder
}

// GetSpecificAnnouncement mocks base method
func (m *MockUsecaseAnnouncement) GetSpecificAnnouncement(ctx context.Context, ukmID int) (*model.ResultAnnouncement, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpecificAnnouncement", ctx, ukmID)
	ret0, _ := ret[0].(*model.ResultAnnouncement)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// GetSpecificAnnouncement indicates an expected call of GetSpecificAnnouncement
func (mr *MockUsecaseAnnouncementMockRecorder) GetSpecificAnnouncement(ctx, ukmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpecificAnnouncement", reflect.TypeOf((*MockUsecaseAnnouncement)(nil).GetSpecificAnnouncement), ctx, ukmID)
}

// ValidationPostAnnouncement mocks base method
func (m *MockUsecaseAnnouncement) ValidationPostAnnouncement(ctx context.Context, ukmID int, input model.InputAnnouncement) (*model.SingleResultAnnouncement, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidationPostAnnouncement", ctx, ukmID, input)
	ret0, _ := ret[0].(*model.SingleResultAnnouncement)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// ValidationPostAnnouncement indicates an expected call of ValidationPostAnnouncement
func (mr *MockUsecaseAnnouncementMockRecorder) ValidationPostAnnouncement(ctx, ukmID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidationPostAnnouncement", reflect.TypeOf((*MockUsecaseAnnouncement)(nil).ValidationPostAnnouncement), ctx, ukmID, input)
}

// UpdateOneAnnouncement mocks base method
func (m *MockUsecaseAnnouncement) UpdateOneAnnouncement(ctx context.Context, announcementID int, input model.InputAnnouncement) (*model.SingleResultAnnouncement, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneAnnouncement", ctx, announcementID, input)
	ret0, _ := ret[0].(*model.SingleResultAnnouncement)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// UpdateOneAnnouncement indicates an expected call of UpdateOneAnnouncement
func (mr *MockUsecaseAnnouncementMockRecorder) UpdateOneAnnouncement(ctx, announcementID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneAnnouncement", reflect.TypeOf((*MockUsecaseAnnouncement)(nil).UpdateOneAnnouncement), ctx, announcementID, input)
}

// DeleteOneAnnouncement mocks base method
func (m *MockUsecaseAnnouncement) DeleteOneAnnouncement(ctx context.Context, announcementID int) (*model.SingleResultAnnouncement, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneAnnouncement", ctx, announcementID)
	ret0, _ := ret[0].(*model.SingleResultAnnouncement)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// DeleteOneAnnouncement indicates an expected call of DeleteOneAnnouncement
func (mr *MockUsecaseAnnouncementMockRecorder) DeleteOneAnnouncement(ctx, announcementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneAnnouncement", reflect.TypeOf((*MockUsecaseAnnouncement)(nil).DeleteOneAnnouncement), ctx, announcementID)
}
