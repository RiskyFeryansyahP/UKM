// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ent "github.com/confus1on/UKM/ent"
	model "github.com/confus1on/UKM/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryAnnouncement is a mock of RepositoryAnnouncement interface
type MockRepositoryAnnouncement struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryAnnouncementMockRecorder
}

// MockRepositoryAnnouncementMockRecorder is the mock recorder for MockRepositoryAnnouncement
type MockRepositoryAnnouncementMockRecorder struct {
	mock *MockRepositoryAnnouncement
}

// NewMockRepositoryAnnouncement creates a new mock instance
func NewMockRepositoryAnnouncement(ctrl *gomock.Controller) *MockRepositoryAnnouncement {
	mock := &MockRepositoryAnnouncement{ctrl: ctrl}
	mock.recorder = &MockRepositoryAnnouncementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryAnnouncement) EXPECT() *MockRepositoryAnnouncementMockRecorder {
	return m.recorder
}

// GetUkmAnnouncement mocks base method
func (m *MockRepositoryAnnouncement) GetUkmAnnouncement(ctx context.Context, ukmID int) ([]*ent.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUkmAnnouncement", ctx, ukmID)
	ret0, _ := ret[0].([]*ent.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUkmAnnouncement indicates an expected call of GetUkmAnnouncement
func (mr *MockRepositoryAnnouncementMockRecorder) GetUkmAnnouncement(ctx, ukmID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUkmAnnouncement", reflect.TypeOf((*MockRepositoryAnnouncement)(nil).GetUkmAnnouncement), ctx, ukmID)
}

// Posting mocks base method
func (m *MockRepositoryAnnouncement) Posting(ctx context.Context, ukmID int, input model.InputAnnouncement) (*ent.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Posting", ctx, ukmID, input)
	ret0, _ := ret[0].(*ent.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Posting indicates an expected call of Posting
func (mr *MockRepositoryAnnouncementMockRecorder) Posting(ctx, ukmID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Posting", reflect.TypeOf((*MockRepositoryAnnouncement)(nil).Posting), ctx, ukmID, input)
}

// Update mocks base method
func (m *MockRepositoryAnnouncement) Update(ctx context.Context, announcementID int, input model.InputAnnouncement) (*ent.Announcement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, announcementID, input)
	ret0, _ := ret[0].(*ent.Announcement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRepositoryAnnouncementMockRecorder) Update(ctx, announcementID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryAnnouncement)(nil).Update), ctx, announcementID, input)
}

// Delete mocks base method
func (m *MockRepositoryAnnouncement) Delete(ctx context.Context, announcementID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, announcementID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockRepositoryAnnouncementMockRecorder) Delete(ctx, announcementID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepositoryAnnouncement)(nil).Delete), ctx, announcementID)
}
