// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/confus1on/UKM/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecaseUser is a mock of UsecaseUser interface
type MockUsecaseUser struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseUserMockRecorder
}

// MockUsecaseUserMockRecorder is the mock recorder for MockUsecaseUser
type MockUsecaseUserMockRecorder struct {
	mock *MockUsecaseUser
}

// NewMockUsecaseUser creates a new mock instance
func NewMockUsecaseUser(ctrl *gomock.Controller) *MockUsecaseUser {
	mock := &MockUsecaseUser{ctrl: ctrl}
	mock.recorder = &MockUsecaseUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseUser) EXPECT() *MockUsecaseUserMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockUsecaseUser) CreateUser(ctx context.Context, input model.InputCreateUser) (*model.ResponseRegister, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, input)
	ret0, _ := ret[0].(*model.ResponseRegister)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUsecaseUserMockRecorder) CreateUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUsecaseUser)(nil).CreateUser), ctx, input)
}

// SigninUser mocks base method
func (m *MockUsecaseUser) SigninUser(ctx context.Context, input model.InputLoginUser) (*model.ResponseLogin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SigninUser", ctx, input)
	ret0, _ := ret[0].(*model.ResponseLogin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SigninUser indicates an expected call of SigninUser
func (mr *MockUsecaseUserMockRecorder) SigninUser(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SigninUser", reflect.TypeOf((*MockUsecaseUser)(nil).SigninUser), ctx, input)
}
