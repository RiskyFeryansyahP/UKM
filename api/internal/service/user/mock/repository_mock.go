// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ent "github.com/confus1on/UKM/ent"
	model "github.com/confus1on/UKM/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryUser is a mock of RepositoryUser interface
type MockRepositoryUser struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryUserMockRecorder
}

// MockRepositoryUserMockRecorder is the mock recorder for MockRepositoryUser
type MockRepositoryUserMockRecorder struct {
	mock *MockRepositoryUser
}

// NewMockRepositoryUser creates a new mock instance
func NewMockRepositoryUser(ctrl *gomock.Controller) *MockRepositoryUser {
	mock := &MockRepositoryUser{ctrl: ctrl}
	mock.recorder = &MockRepositoryUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryUser) EXPECT() *MockRepositoryUserMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockRepositoryUser) Register(ctx context.Context, input model.InputCreateUser) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, input)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockRepositoryUserMockRecorder) Register(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRepositoryUser)(nil).Register), ctx, input)
}

// Login mocks base method
func (m *MockRepositoryUser) Login(ctx context.Context, input model.InputLoginUser) (*ent.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, input)
	ret0, _ := ret[0].(*ent.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockRepositoryUserMockRecorder) Login(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockRepositoryUser)(nil).Login), ctx, input)
}
