// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ent "github.com/confus1on/UKM/ent"
	model "github.com/confus1on/UKM/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryProfile is a mock of RepositoryProfile interface
type MockRepositoryProfile struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryProfileMockRecorder
}

// MockRepositoryProfileMockRecorder is the mock recorder for MockRepositoryProfile
type MockRepositoryProfileMockRecorder struct {
	mock *MockRepositoryProfile
}

// NewMockRepositoryProfile creates a new mock instance
func NewMockRepositoryProfile(ctrl *gomock.Controller) *MockRepositoryProfile {
	mock := &MockRepositoryProfile{ctrl: ctrl}
	mock.recorder = &MockRepositoryProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryProfile) EXPECT() *MockRepositoryProfileMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method
func (m *MockRepositoryProfile) GetByEmail(ctx context.Context, email string) (*ent.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", ctx, email)
	ret0, _ := ret[0].(*ent.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail
func (mr *MockRepositoryProfileMockRecorder) GetByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockRepositoryProfile)(nil).GetByEmail), ctx, email)
}

// Update mocks base method
func (m *MockRepositoryProfile) Update(ctx context.Context, email string, input model.InputUpdateProfile) (*ent.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, email, input)
	ret0, _ := ret[0].(*ent.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockRepositoryProfileMockRecorder) Update(ctx, email, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepositoryProfile)(nil).Update), ctx, email, input)
}
