// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	ent "github.com/confus1on/UKM/ent"
	model "github.com/confus1on/UKM/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepositoryUKM is a mock of RepositoryUKM interface
type MockRepositoryUKM struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryUKMMockRecorder
}

// MockRepositoryUKMMockRecorder is the mock recorder for MockRepositoryUKM
type MockRepositoryUKMMockRecorder struct {
	mock *MockRepositoryUKM
}

// NewMockRepositoryUKM creates a new mock instance
func NewMockRepositoryUKM(ctrl *gomock.Controller) *MockRepositoryUKM {
	mock := &MockRepositoryUKM{ctrl: ctrl}
	mock.recorder = &MockRepositoryUKMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepositoryUKM) EXPECT() *MockRepositoryUKMMockRecorder {
	return m.recorder
}

// FetchAll mocks base method
func (m *MockRepositoryUKM) FetchAll(ctx context.Context) ([]*ent.Ukm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAll", ctx)
	ret0, _ := ret[0].([]*ent.Ukm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll
func (mr *MockRepositoryUKMMockRecorder) FetchAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockRepositoryUKM)(nil).FetchAll), ctx)
}

// RegisterUKM mocks base method
func (m *MockRepositoryUKM) RegisterUKM(ctx context.Context, profileID int, input model.InputRegisterUKM) (*ent.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUKM", ctx, profileID, input)
	ret0, _ := ret[0].(*ent.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUKM indicates an expected call of RegisterUKM
func (mr *MockRepositoryUKMMockRecorder) RegisterUKM(ctx, profileID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUKM", reflect.TypeOf((*MockRepositoryUKM)(nil).RegisterUKM), ctx, profileID, input)
}

// UpdateOne mocks base method
func (m *MockRepositoryUKM) UpdateOne(ctx context.Context, id int, input model.InputUpdateUKM) (*ent.Ukm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOne", ctx, id, input)
	ret0, _ := ret[0].(*ent.Ukm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne
func (mr *MockRepositoryUKMMockRecorder) UpdateOne(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockRepositoryUKM)(nil).UpdateOne), ctx, id, input)
}
