// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	model "github.com/confus1on/UKM/internal/model"
	utils "github.com/confus1on/UKM/internal/utils"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUsecaseUKM is a mock of UsecaseUKM interface
type MockUsecaseUKM struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseUKMMockRecorder
}

// MockUsecaseUKMMockRecorder is the mock recorder for MockUsecaseUKM
type MockUsecaseUKMMockRecorder struct {
	mock *MockUsecaseUKM
}

// NewMockUsecaseUKM creates a new mock instance
func NewMockUsecaseUKM(ctrl *gomock.Controller) *MockUsecaseUKM {
	mock := &MockUsecaseUKM{ctrl: ctrl}
	mock.recorder = &MockUsecaseUKMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUsecaseUKM) EXPECT() *MockUsecaseUKMMockRecorder {
	return m.recorder
}

// GetAll mocks base method
func (m *MockUsecaseUKM) GetAll(ctx context.Context) (*model.ResponseGetAllUKM, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].(*model.ResponseGetAllUKM)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockUsecaseUKMMockRecorder) GetAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockUsecaseUKM)(nil).GetAll), ctx)
}

// Register mocks base method
func (m *MockUsecaseUKM) Register(ctx context.Context, profileID int, input model.InputRegisterUKM) (*model.ResponseRegisterUKM, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, profileID, input)
	ret0, _ := ret[0].(*model.ResponseRegisterUKM)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockUsecaseUKMMockRecorder) Register(ctx, profileID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUsecaseUKM)(nil).Register), ctx, profileID, input)
}

// Update mocks base method
func (m *MockUsecaseUKM) Update(ctx context.Context, id int, input model.InputUpdateUKM) (*model.ResponseUpdateUKM, *utils.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, input)
	ret0, _ := ret[0].(*model.ResponseUpdateUKM)
	ret1, _ := ret[1].(*utils.Error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUsecaseUKMMockRecorder) Update(ctx, id, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsecaseUKM)(nil).Update), ctx, id, input)
}
